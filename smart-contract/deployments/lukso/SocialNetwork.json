{
  "address": "0xEf8A3D7850A20b2c06Dd790c03AC3445C9F8f6Af",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_LSP4MetadataJSONURL",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LSP4TokenNameNotEditable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LSP4TokenSymbolNotEditable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LSP8CannotSendToAddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LSP8CannotUseAddressZeroAsOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LSP8InvalidTransferBatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "LSP8NonExistentTokenId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LSP8NotTokenOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "LSP8NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenReceiver",
          "type": "address"
        }
      ],
      "name": "LSP8NotifyTokenReceiverContractMissingLSP1Interface",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenReceiver",
          "type": "address"
        }
      ],
      "name": "LSP8NotifyTokenReceiverIsEOA",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "LSP8TokenIdAlreadyMinted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        }
      ],
      "name": "DataChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "RevokedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum SocialNetworkPostType",
          "name": "postType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetPost",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPost",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserCreatedPost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetPost",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserLikedPost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "socialProfileData",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "userNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetUser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserSubscribedUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPost",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetUser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserTaggedUserInPost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetPost",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserUnlikedPost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetUser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserUnsubscribedUser",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "authorizeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address[]",
          "name": "_taggedUsers",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_targetPost",
          "type": "address"
        }
      ],
      "name": "commentPost",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address[]",
          "name": "_taggedUsers",
          "type": "address[]"
        }
      ],
      "name": "createPost",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "dataKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "getData",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "dataValues",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        }
      ],
      "name": "getData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "dataValue",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "getOperatorsOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "isOperatorFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_post",
          "type": "address"
        }
      ],
      "name": "likePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registeredUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registeredUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "revokeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "dataKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "dataValues",
          "type": "bytes[]"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "dataValue",
          "type": "bytes"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address[]",
          "name": "_taggedUsers",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_targetPost",
          "type": "address"
        }
      ],
      "name": "sharePost",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "subscribeUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "tokenIdsOf",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "tokenOwnerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "from",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "tokenId",
          "type": "bytes32[]"
        },
        {
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "transferBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_post",
          "type": "address"
        }
      ],
      "name": "unlikePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "unsubscribeUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbfd5e6c6ac560597c335acad37ae949c855ad235b7d547701bc60712aaac975c",
  "receipt": {
    "to": null,
    "from": "0x35037c98B1CBBBfd972AE542548efe65bc5a77a9",
    "contractAddress": "0xEf8A3D7850A20b2c06Dd790c03AC3445C9F8f6Af",
    "transactionIndex": 1,
    "gasUsed": "4430880",
    "logsBloom": "0x001000000000000000000000000000000000440000000000008000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000200000000000000000000000000a4000000000000008000800000004000000000000000000000000400000000000002000000800000000000000000000000000200000000000000000000000000000000800000000000000000000000000000000000008000010000000000000000000000000000000000000001000000400000000020000000020000000040000000000000000000000008001000400000002000000000002000000",
    "blockHash": "0xdec13b7f406078cc072a3311e709f44f24ae97d9b8835fdc2fa7bd6019ea3e5f",
    "transactionHash": "0xbfd5e6c6ac560597c335acad37ae949c855ad235b7d547701bc60712aaac975c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 947896,
        "transactionHash": "0xbfd5e6c6ac560597c335acad37ae949c855ad235b7d547701bc60712aaac975c",
        "address": "0xEf8A3D7850A20b2c06Dd790c03AC3445C9F8f6Af",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000035037c98b1cbbbfd972ae542548efe65bc5a77a9"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xdec13b7f406078cc072a3311e709f44f24ae97d9b8835fdc2fa7bd6019ea3e5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 947896,
        "transactionHash": "0xbfd5e6c6ac560597c335acad37ae949c855ad235b7d547701bc60712aaac975c",
        "address": "0xEf8A3D7850A20b2c06Dd790c03AC3445C9F8f6Af",
        "topics": [
          "0xcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b",
          "0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xdec13b7f406078cc072a3311e709f44f24ae97d9b8835fdc2fa7bd6019ea3e5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 947896,
        "transactionHash": "0xbfd5e6c6ac560597c335acad37ae949c855ad235b7d547701bc60712aaac975c",
        "address": "0xEf8A3D7850A20b2c06Dd790c03AC3445C9F8f6Af",
        "topics": [
          "0xcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b",
          "0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xdec13b7f406078cc072a3311e709f44f24ae97d9b8835fdc2fa7bd6019ea3e5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 947896,
        "transactionHash": "0xbfd5e6c6ac560597c335acad37ae949c855ad235b7d547701bc60712aaac975c",
        "address": "0xEf8A3D7850A20b2c06Dd790c03AC3445C9F8f6Af",
        "topics": [
          "0xcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b",
          "0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xdec13b7f406078cc072a3311e709f44f24ae97d9b8835fdc2fa7bd6019ea3e5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 947896,
        "transactionHash": "0xbfd5e6c6ac560597c335acad37ae949c855ad235b7d547701bc60712aaac975c",
        "address": "0xEf8A3D7850A20b2c06Dd790c03AC3445C9F8f6Af",
        "topics": [
          "0xcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b",
          "0x715f248956de7ce65e94d9d836bfead479f7e70d69b718d47bfe7b00e05b4fe4"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xdec13b7f406078cc072a3311e709f44f24ae97d9b8835fdc2fa7bd6019ea3e5f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 947896,
        "transactionHash": "0xbfd5e6c6ac560597c335acad37ae949c855ad235b7d547701bc60712aaac975c",
        "address": "0xEf8A3D7850A20b2c06Dd790c03AC3445C9F8f6Af",
        "topics": [
          "0xcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b",
          "0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xdec13b7f406078cc072a3311e709f44f24ae97d9b8835fdc2fa7bd6019ea3e5f"
      }
    ],
    "blockNumber": 947896,
    "cumulativeGasUsed": "4524787",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6f357c6ad575b7fd3a648e998af8851efb8fc396805b73a3f72016df79dfedce79c76a53697066733a2f2f516d6563726e6645464c4d64573642586a4a65316e76794c6450655033435967516258774e6d593850374c666553"
  ],
  "numDeployments": 1,
  "solcInputHash": "1e1e6a6a8a9dbef81cff74f3ee40a0bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_LSP4MetadataJSONURL\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotSendToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotUseAddressZeroAsOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8InvalidTransferBatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8NonExistentTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverContractMissingLSP1Interface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverIsEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8TokenIdAlreadyMinted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum SocialNetworkPostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetPost\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPost\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserCreatedPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetPost\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserLikedPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"socialProfileData\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserSubscribedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPost\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserTaggedUserInPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetPost\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserUnlikedPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserUnsubscribedUser\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"_taggedUsers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_targetPost\",\"type\":\"address\"}],\"name\":\"commentPost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"_taggedUsers\",\"type\":\"address[]\"}],\"name\":\"createPost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_post\",\"type\":\"address\"}],\"name\":\"likePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registeredUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"_taggedUsers\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_targetPost\",\"type\":\"address\"}],\"name\":\"sharePost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"subscribeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokenId\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_post\",\"type\":\"address\"}],\"name\":\"unlikePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unsubscribeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Dennis Tuszynski\",\"details\":\"Contract module represents a social network.\",\"errors\":{\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed.      The `LSP4TokenName` data key is located inside the ERC725Y key-value store of the digital asset contract.      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed.      The `LSP4TokenSymbol` data key is located inside the ERC725Y key-value store of the digital asset contract.      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed.\"}]},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,bytes32)\":{\"details\":\"Makes `operator` address an operator of `tokenId`. See {isOperatorFor}. Requirements - `tokenId` must exist. - caller must be current `tokenOwner` of `tokenId`. - `operator` cannot be the zero address. Emits an {AuthorizedOperator} event.\",\"params\":{\"operator\":\"The address to authorize as an operator.\",\"tokenId\":\"The tokenId operator has access to.\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens owned by `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The address to query\"},\"returns\":{\"_0\":\"The number of tokens owned by this address\"}},\"commentPost(bytes,address[],address)\":{\"params\":{\"_data\":\"The comment post content data\",\"_taggedUsers\":\"An array of tagged users (optional)\",\"_targetPost\":\"The commented post\"}},\"createPost(bytes,address[])\":{\"params\":{\"_data\":\"The post content data\",\"_taggedUsers\":\"An array of tagged users (optional)\"}},\"getData(bytes32)\":{\"params\":{\"dataKey\":\"The key which value to retrieve\"},\"returns\":{\"dataValue\":\"The data stored at the key\"}},\"getData(bytes32[])\":{\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getOperatorsOf(bytes32)\":{\"details\":\"Returns all `operator` addresses of `tokenId`. Requirements - `tokenId` must exist.\",\"params\":{\"tokenId\":\"The tokenId to query\"},\"returns\":{\"_0\":\"The list of operators for the `tokenId`\"}},\"isOperatorFor(address,bytes32)\":{\"details\":\"Returns whether `operator` address is an operator of `tokenId`. Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own operator. Requirements - `tokenId` must exist.\",\"params\":{\"operator\":\"The address to query\",\"tokenId\":\"The tokenId to query\"},\"returns\":{\"_0\":\"True if the owner of `tokenId` is `operator` address, false otherwise\"}},\"likePost(address)\":{\"params\":{\"_post\":\"The post to be liked\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"register()\":{\"details\":\"Creates a new instance of the SocialNetworkProfileData contract and links it to the sender address. Fails if the sender address is not a universal profile or if the sender address is already registered.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeOperator(address,bytes32)\":{\"details\":\"Removes `operator` address as an operator of `tokenId`. See {isOperatorFor}. Requirements - `tokenId` must exist. - caller must be current `tokenOwner` of `tokenId`. - `operator` cannot be the zero address. Emits a {RevokedOperator} event.\",\"params\":{\"operator\":\"The address to revoke as an operator.\",\"tokenId\":\"The tokenId `operator` is revoked from operating\"}},\"setData(bytes32,bytes)\":{\"params\":{\"dataKey\":\"The key to retrieve stored value\",\"dataValue\":\"The value to set SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.\"}},\"setData(bytes32[],bytes[])\":{\"details\":\"Sets array of data for multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.\",\"params\":{\"dataKeys\":\"The array of data keys for values to set\",\"dataValues\":\"The array of values to set\"}},\"sharePost(bytes,address[],address)\":{\"params\":{\"_data\":\"The comment post content data\",\"_taggedUsers\":\"An array of tagged users (optional)\",\"_targetPost\":\"The shared post\"}},\"subscribeUser(address)\":{\"params\":{\"_user\":\"The user to be subscribed\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokenIdsOf(address)\":{\"details\":\"Returns the list of `tokenIds` for the `tokenOwner` address.\",\"params\":{\"tokenOwner\":\"The address to query owned tokens\"},\"returns\":{\"_0\":\"List of owned tokens by `tokenOwner` address\"}},\"tokenOwnerOf(bytes32)\":{\"details\":\"Returns the `tokenOwner` address of the `tokenId` token. Requirements: - `tokenId` must exist.\",\"params\":{\"tokenId\":\"The tokenId to query\"},\"returns\":{\"_0\":\"The address owning the `tokenId`\"}},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens.\",\"returns\":{\"_0\":\"The number of existing tokens\"}},\"transfer(address,address,bytes32,bool,bytes)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be an operator of `tokenId`. Emits a {Transfer} event.\",\"params\":{\"data\":\"Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\",\"force\":\"When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\",\"from\":\"The sending address.\",\"to\":\"The receiving address.\",\"tokenId\":\"The tokenId to transfer.\"}},\"transferBatch(address[],address[],bytes32[],bool,bytes[])\":{\"details\":\"Transfers many tokens based on the list `from`, `to`, `tokenId`. If any transfer fails the call will revert. Requirements: - `from`, `to`, `tokenId` lists are the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be an operator of each `tokenId`. Emits {Transfer} events.\",\"params\":{\"data\":\"Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\",\"force\":\"When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\",\"from\":\"The list of sending addresses.\",\"to\":\"The list of receiving addresses.\",\"tokenId\":\"The list of tokenId to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlikePost(address)\":{\"params\":{\"_post\":\"The post to be unliked\"}},\"unsubscribeUser(address)\":{\"params\":{\"_user\":\"The user to be unsubscribed\"}}},\"title\":\"Social Network Implementation\",\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32)\":{\"notice\":\"Emitted when data at a key is changed\"}},\"kind\":\"user\",\"methods\":{\"commentPost(bytes,address[],address)\":{\"notice\":\"User (msg.sender) comments a post\"},\"createPost(bytes,address[])\":{\"notice\":\"User (msg.sender) creates a post\"},\"getData(bytes32)\":{\"notice\":\"Gets singular data at a given `dataKey`\"},\"getData(bytes32[])\":{\"notice\":\"Gets array of data for multiple given keys\"},\"likePost(address)\":{\"notice\":\"User (msg.sender) likes a post\"},\"register()\":{\"notice\":\"Registers a new user (msg.sender)\"},\"setData(bytes32,bytes)\":{\"notice\":\"Sets singular data for a given `dataKey`\"},\"sharePost(bytes,address[],address)\":{\"notice\":\"User (msg.sender) shares a post with a comment\"},\"subscribeUser(address)\":{\"notice\":\"User (msg.sender) subscribes an other user\"},\"unlikePost(address)\":{\"notice\":\"User (msg.sender) unlikes a post\"},\"unsubscribeUser(address)\":{\"notice\":\"User (msg.sender) unsubscribes an other user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SocialNetwork.sol\":\"SocialNetwork\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\nimport {ERC725YCore} from \\\"./ERC725YCore.sol\\\";\\n\\n/**\\n * @title ERC725Y General data key/value store\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev Contract module which provides the ability to set arbitrary data key/value pairs that can be changed over time\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes\\n * from/to the contract storage\\n */\\ncontract ERC725Y is ERC725YCore {\\n    /**\\n     * @notice Sets the owner of the contract\\n     * @param newOwner the owner of the contract\\n     */\\n    constructor(address newOwner) {\\n        OwnableUnset._setOwner(newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe3947b1958d2a90ce0a41ce7635112f4baf24b9ad6e0a8e0d60178d7edb0355d\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// libraries\\nimport {GasLib} from \\\"./utils/GasLib.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y General data key/value store\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev Contract module which provides the ability to set arbitrary data key/value pairs that can be changed over time\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes\\n * from/to the contract storage\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map the dataKeys to their dataValues\\n     */\\n    mapping(bytes32 => bytes) internal store;\\n\\n    /* Public functions */\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(bytes32 dataKey)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes memory dataValue)\\n    {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(bytes32[] memory dataKeys)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes[] memory dataValues)\\n    {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; i = GasLib.uncheckedIncrement(i)) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) public virtual override onlyOwner {\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function setData(bytes32[] memory dataKeys, bytes[] memory dataValues)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        require(dataKeys.length == dataValues.length, \\\"Keys length not equal to values length\\\");\\n        for (uint256 i = 0; i < dataKeys.length; i = GasLib.uncheckedIncrement(i)) {\\n            _setData(dataKeys[i], dataValues[i]);\\n        }\\n    }\\n\\n    /* Internal functions */\\n\\n    function _getData(bytes32 dataKey) internal view virtual returns (bytes memory dataValue) {\\n        return store[dataKey];\\n    }\\n\\n    function _setData(bytes32 dataKey, bytes memory dataValue) internal virtual {\\n        store[dataKey] = dataValue;\\n        emit DataChanged(dataKey);\\n    }\\n\\n    /* Overrides functions */\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == _INTERFACEID_ERC725Y || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x4fa686a57bcfc6968ec827dbb655f03e4c8baa54c4b363bc2273ca8f4923bf36\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// >> ERC165 INTERFACE IDs\\n\\n// ERC725 - Smart Contract based Account\\nbytes4 constant _INTERFACEID_ERC725X = 0x44c028fe;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x714df77c;\\n\\n// >> ERC725X OPERATIONS TYPES\\nuint256 constant OPERATION_CALL = 0;\\nuint256 constant OPERATION_CREATE = 1;\\nuint256 constant OPERATION_CREATE2 = 2;\\nuint256 constant OPERATION_STATICCALL = 3;\\nuint256 constant OPERATION_DELEGATECALL = 4;\\n\\n// ERC725Y overloaded function selectors\\nbytes4 constant SETDATA_SELECTOR = bytes4(keccak256(\\\"setData(bytes32,bytes)\\\"));\\nbytes4 constant SETDATA_ARRAY_SELECTOR = bytes4(keccak256(\\\"setData(bytes32[],bytes[])\\\"));\\n\",\"keccak256\":\"0xdf3d466e2d6f8d0f2e288ee01edb0cf7de2db9cac3c257b7d6a6284adf4b2480\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            address oldOwner = _owner;\\n            _owner = newOwner;\\n            emit OwnershipTransferred(oldOwner, newOwner);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe77afcd7d2496c79578ff7f219c0fad901fa4e0421f9ba389eb5f5eb7d9f1dcf\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y General data key/value store\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes\\n * from/to the contract storage\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice Emitted when data at a key is changed\\n     * @param dataKey The data key which value is set\\n     */\\n    event DataChanged(bytes32 indexed dataKey);\\n\\n    /**\\n     * @notice Gets singular data at a given `dataKey`\\n     * @param dataKey The key which value to retrieve\\n     * @return dataValue The data stored at the key\\n     */\\n    function getData(bytes32 dataKey) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Gets array of data for multiple given keys\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getData(bytes32[] memory dataKeys) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets singular data for a given `dataKey`\\n     * @param dataKey The key to retrieve stored value\\n     * @param dataValue The value to set\\n     * SHOULD only be callable by the owner of the contract set via ERC173\\n     *\\n     * Emits a {DataChanged} event.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external;\\n\\n    /**\\n     * @param dataKeys The array of data keys for values to set\\n     * @param dataValues The array of values to set\\n     * @dev Sets array of data for multiple given `dataKeys`\\n     * SHOULD only be callable by the owner of the contract set via ERC173\\n     *\\n     * Emits a {DataChanged} event.\\n     */\\n    function setData(bytes32[] memory dataKeys, bytes[] memory dataValues) external;\\n}\\n\",\"keccak256\":\"0x88a85aac90cb593ef4366d0ffbac4d05a06fa8b875727350ae91237f9192c4a2\",\"license\":\"CC0-1.0\"},\"@erc725/smart-contracts/contracts/utils/GasLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library to add all efficient functions that could get repeated.\\n */\\nlibrary GasLib {\\n    /**\\n     * @dev Will return unchecked incremented uint256\\n     */\\n    function uncheckedIncrement(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe14b9134f285d02fcf967caaa6a0566c8e9e8197a9ed190021e310bd4b7fc6c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/Custom/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// This contract is a modified version of OpenZeppelin implementation, where we modify the visibility of\\n// `supportsERC165Interface`, which check the given interfaceId, to internal and to be used in contract implementations,\\n// instead of `supportsInterface` to save gas, as the latter check for 3 interfaceIds; InterfaceId of ERC165, 0xffffffff\\n// and the given interfaceId.\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165Interface(address account, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes memory encodedParams = abi.encodeWithSelector(\\n            IERC165.supportsInterface.selector,\\n            interfaceId\\n        );\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0x076fb61a330055d96723ad73383629e0ff2e5f903b2ba67e323318ef2e78ec7c\",\"license\":\"MIT\"},\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title The interface for LSP1UniversalReceiver\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @notice Emitted when the universalReceiver function is succesfully executed\\n     * @param from The address calling the universalReceiver function\\n     * @param value The amount sent to the universalReceiver function\\n     * @param typeId The hash of a specific standard or a hook\\n     * @param returnedValue The return value of universalReceiver function\\n     * @param receivedData The arbitrary data passed to universalReceiver function\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 value,\\n        bytes32 indexed typeId,\\n        bytes indexed returnedValue,\\n        bytes receivedData\\n    );\\n\\n    /**\\n     * @param typeId The hash of a specific standard or a hook\\n     * @param data The arbitrary data received with the call\\n     * @dev Emits an event when it's succesfully executed\\n     *\\n     * Call the universalReceiverDelegate function in the UniversalReceiverDelegate (URD) contract, if the address of the URD\\n     * was set as a value for the `_UniversalReceiverKey` in the account key/value value store of the same contract implementing\\n     * the universalReceiver function and if the URD contract has the LSP1UniversalReceiverDelegate Interface Id registred using ERC165\\n     *\\n     * Emits a {UniversalReceiver} event\\n     */\\n    function universalReceiver(bytes32 typeId, bytes calldata data)\\n        external\\n        payable\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xbca7d0f76e439ee3302096f8ecaf8a506434a83c86639c95efd79e6b89d364ae\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Keys\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x37255dac370701b20dc046c41024686ccf5a88eb1e68415c30167015f6f80f17\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP2ERC725YJSONSchema/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\n// libraries\\nimport {BytesLib} from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport {UtilsLib} from \\\"../Utils/UtilsLib.sol\\\";\\n\\n/**\\n * @title ERC725 Utility library to encode key types\\n * @author Jean Cavallera (CJ-42)\\n * @dev based on LSP2 - ERC725Y JSON Schema\\n *      https://github.com/lukso-network/LIPs/blob/master/LSPs/LSP-2-ERC725YJSONSchema.md\\n */\\nlibrary LSP2Utils {\\n    using BytesLib for bytes;\\n\\n    /* solhint-disable no-inline-assembly */\\n\\n    function generateSingletonKey(string memory keyName) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    function generateArrayKey(string memory keyName) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(keyName);\\n\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    function generateArrayElementKeyAtIndex(bytes32 arrayKey, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory elementInArray = UtilsLib.concatTwoBytes16(\\n            bytes16(arrayKey),\\n            bytes16(uint128(index))\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    function generateMappingKey(string memory firstWord, string memory lastWord)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    function generateMappingKey(string memory firstWord, address addr)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    function generateMappingKey(bytes12 keyPrefix, bytes20 bytes20Value)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory generatedKey = bytes.concat(keyPrefix, bytes20Value);\\n        return bytes32(generatedKey);\\n    }\\n\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    function generateMappingWithGroupingKey(bytes12 keyPrefix, bytes20 bytes20Value)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes memory generatedKey = bytes.concat(keyPrefix, bytes20Value);\\n        return bytes32(generatedKey);\\n    }\\n\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory key) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        key = abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory key) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        key = abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    function isEncodedArray(bytes memory data) internal pure returns (bool) {\\n        uint256 nbOfBytes = data.length;\\n\\n        // 1) there must be at least 32 bytes to store the offset\\n        if (nbOfBytes < 32) return false;\\n\\n        // 2) there must be at least the same number of bytes specified by\\n        // the offset value (otherwise, the offset points to nowhere)\\n        uint256 offset = uint256(bytes32(data));\\n        if (nbOfBytes < offset) return false;\\n\\n        // 3) there must be at least 32 x length bytes after offset\\n        uint256 arrayLength = data.toUint256(offset);\\n\\n        //   32 bytes word (= offset)\\n        // + 32 bytes word (= array length)\\n        // + remaining bytes that make each element of the array\\n        if (nbOfBytes < (offset + 32 + (arrayLength * 32))) return false;\\n\\n        return true;\\n    }\\n\\n    function isEncodedArrayOfAddresses(bytes memory data) internal pure returns (bool) {\\n        if (!isEncodedArray(data)) return false;\\n\\n        uint256 offset = uint256(bytes32(data));\\n        uint256 arrayLength = data.toUint256(offset);\\n\\n        uint256 pointer = offset + 32;\\n\\n        for (uint256 ii = 0; ii < arrayLength; ii++) {\\n            bytes32 key = data.toBytes32(pointer);\\n\\n            // check that the leading bytes are zero bytes \\\"00\\\"\\n            // NB: address type is padded on the left (unlike bytes20 type that is padded on the right)\\n            if (bytes12(key) != bytes12(0)) return false;\\n\\n            // increment the pointer\\n            pointer += 32;\\n        }\\n\\n        return true;\\n    }\\n\\n    function isBytes4EncodedArray(bytes memory data) internal pure returns (bool) {\\n        if (!isEncodedArray(data)) return false;\\n\\n        uint256 offset = uint256(bytes32(data));\\n        uint256 arrayLength = data.toUint256(offset);\\n        uint256 pointer = offset + 32;\\n\\n        for (uint256 ii = 0; ii < arrayLength; ii++) {\\n            bytes32 key = data.toBytes32(pointer);\\n\\n            // check that the trailing bytes are zero bytes \\\"00\\\"\\n            if (uint224(uint256(key)) != 0) return false;\\n\\n            // increment the pointer\\n            pointer += 32;\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2146915ddf7084565b2a92c1d39bfbae67aea1d4d9007ab728899892a5913eed\",\"license\":\"GPL-3.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap')) + bytes2(0)\\nbytes12 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da00000;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xbc21e90a3ac55241317693a108ee1cd4507f56d48afceacd151c3f8e2d625e62\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4DigitalAssetMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\n\\n// constants\\nimport \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {LSP4TokenNameNotEditable, LSP4TokenSymbolNotEditable} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title LSP4DigitalAssetMetadata\\n * @author Matthew Stevens\\n * @dev Implementation of a LSP8 compliant contract.\\n */\\nabstract contract LSP4DigitalAssetMetadata is ERC725Y {\\n    /**\\n     * @notice Sets the name, symbol of the token and the owner, and sets the SupportedStandards:LSP4DigitalAsset key\\n     * @param name_ The name of the token\\n     * @param symbol_ The symbol of the token\\n     * @param newOwner_ The owner of the token contract\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_\\n    ) ERC725Y(newOwner_) {\\n        // set key SupportedStandards:LSP4DigitalAsset\\n        super._setData(_LSP4_SUPPORTED_STANDARDS_KEY, _LSP4_SUPPORTED_STANDARDS_VALUE);\\n\\n        super._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\\n        super._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\\n    }\\n\\n    /**\\n     * @dev the ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed via this function\\n     *      once the digital asset contract has been deployed\\n     */\\n    function _setData(bytes32 key, bytes memory value) internal virtual override {\\n        if (key == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (key == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else {\\n            super._setData(key, value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x54e8bf475e232597547d1107b56a88333fc74736b73fb44a59db79369feb6ab5\",\"license\":\"MIT\"},\"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed.\\n *      The `LSP4TokenName` data key is located inside the ERC725Y key-value store of the digital asset contract.\\n *      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed.\\n *      The `LSP4TokenSymbol` data key is located inside the ERC725Y key-value store of the digital asset contract.\\n *      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\",\"keccak256\":\"0x6f3e16b05e193aa5725c3d8413be2ec356ad1713943bb1c3cbb08e8bcaf07685\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @dev Required interface of a LSP8 compliant contract.\\n */\\ninterface ILSP8IdentifiableDigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     * @param operator The address of operator sending tokens\\n     * @param from The address which tokens are sent\\n     * @param to The receiving address\\n     * @param tokenId The tokenId transferred\\n     * @param force When set to TRUE, `to` may be any address but\\n     * when set to FALSE `to` must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `tokenId`.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param tokenId The tokenId `operator` address has access to from `tokenOwner`\\n     */\\n    event AuthorizedOperator(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `tokenId`.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     * @param tokenId The tokenId `operator` is revoked from operating\\n     */\\n    event RevokedOperator(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens.\\n     * @return The number of existing tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    //\\n    // --- Token owner queries\\n    //\\n\\n    /**\\n     * @dev Returns the number of tokens owned by `tokenOwner`.\\n     * @param tokenOwner The address to query\\n     * @return The number of tokens owned by this address\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @param tokenId The tokenId to query\\n     * @return The address owning the `tokenId`\\n     * @dev Returns the `tokenOwner` address of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of `tokenIds` for the `tokenOwner` address.\\n     * @param tokenOwner The address to query owned tokens\\n     * @return List of owned tokens by `tokenOwner` address\\n     */\\n    function tokenIdsOf(address tokenOwner) external view returns (bytes32[] memory);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The tokenId operator has access to.\\n     * @dev Makes `operator` address an operator of `tokenId`.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Requirements\\n     *\\n     * - `tokenId` must exist.\\n     * - caller must be current `tokenOwner` of `tokenId`.\\n     * - `operator` cannot be the zero address.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     */\\n    function authorizeOperator(address operator, bytes32 tokenId) external;\\n\\n    /**\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating\\n     * @dev Removes `operator` address as an operator of `tokenId`.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Requirements\\n     *\\n     * - `tokenId` must exist.\\n     * - caller must be current `tokenOwner` of `tokenId`.\\n     * - `operator` cannot be the zero address.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     */\\n    function revokeOperator(address operator, bytes32 tokenId) external;\\n\\n    /**\\n     * @param operator The address to query\\n     * @param tokenId The tokenId to query\\n     * @return True if the owner of `tokenId` is `operator` address, false otherwise\\n     * @dev Returns whether `operator` address is an operator of `tokenId`.\\n     * Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own\\n     * operator.\\n     *\\n     * Requirements\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function isOperatorFor(address operator, bytes32 tokenId) external view returns (bool);\\n\\n    /**\\n     * @param tokenId The tokenId to query\\n     * @return The list of operators for the `tokenId`\\n     * @dev Returns all `operator` addresses of `tokenId`.\\n     *\\n     * Requirements\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(bytes32 tokenId) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @param from The sending address.\\n     * @param to The receiving address.\\n     * @param tokenId The tokenId to transfer.\\n     * @param force When set to TRUE, to may be any address but\\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of `tokenId`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @param from The list of sending addresses.\\n     * @param to The list of receiving addresses.\\n     * @param tokenId The list of tokenId to transfer.\\n     * @param force When set to TRUE, to may be any address but\\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @dev Transfers many tokens based on the list `from`, `to`, `tokenId`. If any transfer fails\\n     * the call will revert.\\n     *\\n     * Requirements:\\n     *\\n     * - `from`, `to`, `tokenId` lists are the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * Emits {Transfer} events.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool force,\\n        bytes[] memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x706b7664f58eeb259f32801254bac08597ea56277814e8c0a8c72ad718d02814\",\"license\":\"MIT\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Constants.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP8 = 0x49399145;\\n\\n// --- ERC725Y Keys\\n\\n// bytes8('LSP8MetadataAddress') + bytes4(0)\\nbytes12 constant _LSP8_METADATA_ADDRESS_KEY_PREFIX = 0x73dcc7c3c4096cdc00000000;\\n\\n// bytes8('LSP8MetadataJSON') + bytes4(0)\\nbytes12 constant _LSP8_METADATA_JSON_KEY_PREFIX = 0x9a26b4060ae7f7d500000000;\\n\\n// --- Token Hooks\\n\\n// keccak256('LSP8TokensSender')\\nbytes32 constant _TYPEID_LSP8_TOKENSSENDER = 0x3724c94f0815e936299cca424da4140752198e0beb7931a6e0925d11bc97544c;\\n\\n// keccak256('LSP8TokensRecipient')\\nbytes32 constant _TYPEID_LSP8_TOKENSRECIPIENT = 0xc7a120a42b6057a0cbed111fbbfbd52fcd96748c04394f77fc2c3adbe0391e01;\\n\",\"keccak256\":\"0xf8ed5f09cd5e962be3e576311362c0681625a47e44117e66280392fbf4f18a04\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8Errors.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// --- Errors\\n\\nerror LSP8NonExistentTokenId(bytes32 tokenId);\\n\\nerror LSP8NotTokenOwner(address tokenOwner, bytes32 tokenId, address caller);\\n\\nerror LSP8NotTokenOperator(bytes32 tokenId, address caller);\\n\\nerror LSP8CannotUseAddressZeroAsOperator();\\n\\nerror LSP8CannotSendToAddressZero();\\n\\nerror LSP8TokenIdAlreadyMinted(bytes32 tokenId);\\n\\nerror LSP8InvalidTransferBatch();\\n\\nerror LSP8NotifyTokenReceiverContractMissingLSP1Interface(address tokenReceiver);\\n\\nerror LSP8NotifyTokenReceiverIsEOA(address tokenReceiver);\\n\",\"keccak256\":\"0xab5b5778731e60606c0ae08e1c8bb35566ec61d631809679f413e5eb28ae6e69\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {LSP8IdentifiableDigitalAssetCore} from \\\"./LSP8IdentifiableDigitalAssetCore.sol\\\";\\nimport {LSP4DigitalAssetMetadata} from \\\"../LSP4DigitalAssetMetadata/LSP4DigitalAssetMetadata.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP8} from \\\"./LSP8Constants.sol\\\";\\n\\n/**\\n * @title LSP8IdentifiableDigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Implementation of a LSP8 compliant contract.\\n */\\ncontract LSP8IdentifiableDigitalAsset is\\n    LSP4DigitalAssetMetadata,\\n    LSP8IdentifiableDigitalAssetCore\\n{\\n    /**\\n     * @notice Sets the token-Metadata\\n     * @param name_ The name of the token\\n     * @param symbol_ The symbol of the token\\n     * @param newOwner_ The owner of the the token-Metadata\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_\\n    ) LSP4DigitalAssetMetadata(name_, symbol_, newOwner_) {} // solhint-disable no-empty-blocks\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC725YCore)\\n        returns (bool)\\n    {\\n        return interfaceId == _INTERFACEID_LSP8 || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd2bb3c559e2fd3f201069227c63589f055cf726fda31909661531f87065ca822\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAssetCore.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {ILSP1UniversalReceiver} from \\\"../LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\\\";\\nimport {ILSP8IdentifiableDigitalAsset} from \\\"./ILSP8IdentifiableDigitalAsset.sol\\\";\\n\\n// libraries\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {ERC165Checker} from \\\"../Custom/ERC165Checker.sol\\\";\\n\\n// modules\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\n\\n// errors\\nimport \\\"./LSP8Errors.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP1} from \\\"../LSP1UniversalReceiver/LSP1Constants.sol\\\";\\n// import {} from \\\"../LSP4DigitalAssetMetadata/LSP4Constants.sol\\\";\\nimport {_TYPEID_LSP8_TOKENSSENDER, _TYPEID_LSP8_TOKENSRECIPIENT} from \\\"./LSP8Constants.sol\\\";\\n\\n/**\\n * @title LSP8IdentifiableDigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Core Implementation of a LSP8 compliant contract.\\n */\\nabstract contract LSP8IdentifiableDigitalAssetCore is Context, ILSP8IdentifiableDigitalAsset {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using Address for address;\\n\\n    // --- Storage\\n\\n    uint256 internal _existingTokens;\\n\\n    // Mapping from `tokenId` to `tokenOwner`\\n    mapping(bytes32 => address) internal _tokenOwners;\\n\\n    // Mapping `tokenOwner` to owned tokenIds\\n    mapping(address => EnumerableSet.Bytes32Set) internal _ownedTokens;\\n\\n    // Mapping a `tokenId` to its authorized operator addresses.\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _operators;\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _existingTokens;\\n    }\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function balanceOf(address tokenOwner) public view override returns (uint256) {\\n        return _ownedTokens[tokenOwner].length();\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) public view override returns (address) {\\n        address tokenOwner = _tokenOwners[tokenId];\\n\\n        if (tokenOwner == address(0)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n\\n        return tokenOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenIdsOf(address tokenOwner) public view override returns (bytes32[] memory) {\\n        return _ownedTokens[tokenOwner].values();\\n    }\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function authorizeOperator(address operator, bytes32 tokenId) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        address caller = _msgSender();\\n\\n        if (tokenOwner != caller) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, caller);\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        // tokenOwner is always their own operator, no update required\\n        if (tokenOwner == operator) {\\n            return;\\n        }\\n\\n        _operators[tokenId].add(operator);\\n\\n        emit AuthorizedOperator(operator, tokenOwner, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function revokeOperator(address operator, bytes32 tokenId) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        address caller = _msgSender();\\n\\n        if (tokenOwner != caller) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, caller);\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        // tokenOwner is always their own operator, no update required\\n        if (tokenOwner == operator) {\\n            return;\\n        }\\n\\n        _revokeOperator(operator, tokenOwner, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function isOperatorFor(address operator, bytes32 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _existsOrError(tokenId);\\n\\n        return _isOperatorOrOwner(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getOperatorsOf(bytes32 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address[] memory)\\n    {\\n        _existsOrError(tokenId);\\n\\n        return _operators[tokenId].values();\\n    }\\n\\n    function _isOperatorOrOwner(address caller, bytes32 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        return (caller == tokenOwner || _operators[tokenId].contains(caller));\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) public virtual override {\\n        address operator = _msgSender();\\n\\n        if (!_isOperatorOrOwner(operator, tokenId)) {\\n            revert LSP8NotTokenOperator(tokenId, operator);\\n        }\\n\\n        _transfer(from, to, tokenId, force, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool force,\\n        bytes[] memory data\\n    ) public virtual override {\\n        if (\\n            from.length != to.length || from.length != tokenId.length || from.length != data.length\\n        ) {\\n            revert LSP8InvalidTransferBatch();\\n        }\\n\\n        for (uint256 i = 0; i < from.length; i++) {\\n            transfer(from[i], to[i], tokenId[i], force, data[i]);\\n        }\\n    }\\n\\n    function _revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bytes32 tokenId\\n    ) internal virtual {\\n        _operators[tokenId].remove(operator);\\n        emit RevokedOperator(operator, tokenOwner, tokenId);\\n    }\\n\\n    function _clearOperators(address tokenOwner, bytes32 tokenId) internal virtual {\\n        // TODO: here is a good exmaple of why having multiple operators will be expensive.. we\\n        // need to clear them on token transfer\\n        //\\n        // NOTE: this may cause a tx to fail if there is too many operators to clear, in which case\\n        // the tokenOwner needs to call `revokeOperator` until there is less operators to clear and\\n        // the desired `transfer` or `burn` call can succeed.\\n        EnumerableSet.AddressSet storage operatorsForTokenId = _operators[tokenId];\\n\\n        uint256 operatorListLength = operatorsForTokenId.length();\\n        for (uint256 i = 0; i < operatorListLength; i++) {\\n            // we are emptying the list, always remove from index 0\\n            address operator = operatorsForTokenId.at(0);\\n            _revokeOperator(operator, tokenOwner, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens start existing when they are minted (`_mint`), and stop existing when they are burned\\n     * (`_burn`).\\n     */\\n    function _exists(bytes32 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev When `tokenId` does not exist then revert with an error.\\n     */\\n    function _existsOrError(bytes32 tokenId) internal view {\\n        if (!_exists(tokenId)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(operator, address(0), to, tokenId, force, data);\\n\\n        _notifyTokenReceiver(address(0), to, tokenId, force, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`, clearing authorized operators.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(bytes32 tokenId, bytes memory data) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(tokenOwner, address(0), tokenId);\\n\\n        _clearOperators(tokenOwner, tokenId);\\n\\n        _ownedTokens[tokenOwner].remove(tokenId);\\n        delete _tokenOwners[tokenId];\\n\\n        emit Transfer(operator, tokenOwner, address(0), tokenId, false, data);\\n\\n        _notifyTokenSender(tokenOwner, address(0), tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != from) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, from);\\n        }\\n\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        _clearOperators(from, tokenId);\\n\\n        _ownedTokens[from].remove(tokenId);\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(operator, from, to, tokenId, force, data);\\n\\n        _notifyTokenSender(from, to, tokenId, data);\\n        _notifyTokenReceiver(from, to, tokenId, force, data);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId\\n    ) internal virtual {\\n        // silence compiler warning about unused variable\\n        tokenId;\\n\\n        // token being minted\\n        if (from == address(0)) {\\n            _existingTokens += 1;\\n        }\\n\\n        // token being burned\\n        if (to == address(0)) {\\n            _existingTokens -= 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev An attempt is made to notify the token sender about the `tokenId` changing owners using\\n     * LSP1 interface.\\n     */\\n    function _notifyTokenSender(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        if (ERC165Checker.supportsERC165Interface(from, _INTERFACEID_LSP1)) {\\n            bytes memory packedData = abi.encodePacked(from, to, tokenId, data);\\n            ILSP1UniversalReceiver(from).universalReceiver(_TYPEID_LSP8_TOKENSSENDER, packedData);\\n        }\\n    }\\n\\n    /**\\n     * @dev An attempt is made to notify the token receiver about the `tokenId` changing owners\\n     * using LSP1 interface. When force is FALSE the token receiver MUST support LSP1.\\n     *\\n     * The receiver may revert when the token being sent is not wanted.\\n     */\\n    function _notifyTokenReceiver(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (ERC165Checker.supportsERC165Interface(to, _INTERFACEID_LSP1)) {\\n            bytes memory packedData = abi.encodePacked(from, to, tokenId, data);\\n            ILSP1UniversalReceiver(to).universalReceiver(_TYPEID_LSP8_TOKENSRECIPIENT, packedData);\\n        } else if (!force) {\\n            if (to.code.length != 0) {\\n                revert LSP8NotifyTokenReceiverContractMissingLSP1Interface(to);\\n            } else {\\n                revert LSP8NotifyTokenReceiverIsEOA(to);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x59cf59060bbea3b096e3daa4506c22f3c95eefe98e8dcf393fcdb858efaf03b8\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/Utils/UtilsLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Casting utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, type cast efficiently. // To Test\\n */\\nlibrary UtilsLib {\\n    // solhint-disable no-inline-assembly\\n\\n    /**\\n     * @dev concatenate two bytes16\\n     */\\n    function concatTwoBytes16(bytes16 b1, bytes16 b2) internal pure returns (bytes memory result) {\\n        result = bytes.concat(b1, b2);\\n    }\\n\\n    /**\\n     * @dev cast uint256 to bytes\\n     */\\n    function uint256ToBytes(uint256 num) internal pure returns (bytes memory bytes_) {\\n        bytes_ = bytes.concat(bytes32(num));\\n    }\\n\\n    /**\\n     * @dev cast address to bytes\\n     */\\n    function addressToBytes(address addr) internal pure returns (bytes memory bytes_) {\\n        bytes_ = bytes.concat(bytes20(addr));\\n    }\\n}\\n\",\"keccak256\":\"0x820dbf016190ccbd16877b1b9ff926d5e040298c2391feb898d9068d4aba0deb\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/ERC725YEnumerableSetUtil.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// third party\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\nimport {IERC725Y} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp-smart-contracts/contracts/LSP2ERC725YJSONSchema/LSP2Utils.sol\\\";\\n\\n// local\\nimport {LSP2KeyUtil} from \\\"./LSP2KeyUtil.sol\\\";\\n\\n/**\\n * @title ERC725Y based implementation of an EnumerableSet for addresses: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/EnumerableSet.sol\\n * @author Dennis Tuszynski\\n * @dev Implementation of a contract which provides the ability to treat 2 ERC725Y Keys (Map and Key) as an enumerable set.\\n * It allows you to add an entry, remove an entry, check for existence of a given entry and retrieve the total count of entries.\\n */\\ncontract ERC725YEnumerableSetUtil is ERC725Y {\\n    using LSP2KeyUtil for bytes12;\\n\\n    /**\\n     * @notice Sets the ERC725Y owner\\n     * @param _owner The owner address\\n     */\\n    constructor(address _owner) ERC725Y(_owner) {}\\n\\n    /**\\n     * @notice Adds the given address to the specified enumerable set\\n     * @param _mapKeyNamePrefix the LSP2 conforming mapping key name prefix of the ERC725Y enumerable set\\n     * @param _arrayKeyName the LSP2 conforming array key name of the ERC725Y enumerable set\\n     * @param _address the element to be added to the enumerable set\\n     */\\n    function addElementToEnumerableSet(\\n        bytes12 _mapKeyNamePrefix,\\n        bytes32 _arrayKeyName,\\n        address _address\\n    ) public returns (bool) {\\n        // if the address is already in the enumerable set then return immediately to save gas cost\\n        uint index = getAddressIndexInEnumerableSet(\\n            _mapKeyNamePrefix,\\n            _address\\n        );\\n        if (index != 0) {\\n            return false;\\n        }\\n\\n        bytes32 indexKeyName = _mapKeyNamePrefix.getMappedAddressKeyName(\\n            _address\\n        );\\n\\n        bytes memory arrayLengthData = getData(_arrayKeyName);\\n        uint arrayLength = 0;\\n        if (arrayLengthData.length > 0) {\\n            arrayLength = abi.decode(arrayLengthData, (uint));\\n        }\\n\\n        uint newEntryIndex = arrayLength + 1; // 0 is sentinel value (array starts with 1)\\n        bytes32 newEntryAdressKeyName = LSP2Utils\\n            .generateArrayElementKeyAtIndex(_arrayKeyName, newEntryIndex);\\n\\n        bytes32[] memory keys = new bytes32[](3);\\n        bytes[] memory values = new bytes[](3);\\n\\n        keys[0] = indexKeyName;\\n        values[0] = bytes(abi.encode(newEntryIndex));\\n\\n        keys[1] = _arrayKeyName; // array length equals last element index\\n        values[1] = bytes(abi.encode(newEntryIndex));\\n\\n        keys[2] = newEntryAdressKeyName;\\n        values[2] = bytes(abi.encode(_address));\\n\\n        setData(keys, values);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Removes the given address from the specified enumerable set\\n     * @param _mapKeyNamePrefix the LSP2 conforming mapping key name prefix of the ERC725Y enumerable set\\n     * @param _arrayKeyName the LSP2 conforming array key name of the ERC725Y enumerable set\\n     * @param _address the element to be removed from the enumerable set\\n     */\\n    function removeElementFromEnumerableSet(\\n        bytes12 _mapKeyNamePrefix,\\n        bytes32 _arrayKeyName,\\n        address _address\\n    ) public returns (bool) {\\n        // if the address is not in the enumerable set then return immediately to save gas cost\\n        uint entryToDeleteIndex = getAddressIndexInEnumerableSet(\\n            _mapKeyNamePrefix,\\n            _address\\n        );\\n        if (entryToDeleteIndex == 0) {\\n            return false;\\n        }\\n\\n        bytes32 entryToDeleteIndexKeyName = _mapKeyNamePrefix\\n            .getMappedAddressKeyName(_address);\\n\\n        bytes32 addressToDeleteKeyName = LSP2Utils\\n            .generateArrayElementKeyAtIndex(_arrayKeyName, entryToDeleteIndex);\\n\\n        uint arrayLength = abi.decode(getData(_arrayKeyName), (uint));\\n        bytes32 lastAddressKeyName = LSP2Utils.generateArrayElementKeyAtIndex(\\n            _arrayKeyName,\\n            arrayLength\\n        );\\n\\n        bytes32[] memory keys;\\n        bytes[] memory values;\\n        uint indexCounter = 0;\\n\\n        if (entryToDeleteIndex != arrayLength) {\\n            keys = new bytes32[](5);\\n            values = new bytes[](5);\\n\\n            address entryToMoveAddress = abi.decode(\\n                getData(lastAddressKeyName),\\n                (address)\\n            );\\n            bytes32 entryToMoveIndexKeyName = _mapKeyNamePrefix\\n                .getMappedAddressKeyName(entryToMoveAddress);\\n\\n            keys[indexCounter] = addressToDeleteKeyName; // values[<delete index>] = values[<move index>]\\n            values[indexCounter] = bytes(abi.encode(entryToMoveAddress));\\n            ++indexCounter;\\n\\n            keys[indexCounter] = entryToMoveIndexKeyName; // indexes[<move address>] = indexes[<delete address>]\\n            values[indexCounter] = bytes(abi.encode(entryToDeleteIndex));\\n            ++indexCounter;\\n        } else {\\n            keys = new bytes32[](3);\\n            values = new bytes[](3);\\n        }\\n\\n        keys[indexCounter] = entryToDeleteIndexKeyName; // delete from map\\n        values[indexCounter] = new bytes(0);\\n        ++indexCounter;\\n\\n        keys[indexCounter] = lastAddressKeyName; // delete from array (last element)\\n        values[indexCounter] = new bytes(0);\\n        ++indexCounter;\\n\\n        keys[indexCounter] = _arrayKeyName; // array length decreased by one\\n        if (arrayLength > 1) {\\n            values[indexCounter] = bytes(abi.encode(arrayLength - 1));\\n        } else {\\n            values[indexCounter] = new bytes(0);\\n        }\\n\\n        setData(keys, values);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Returns the index if the given address is in the specified enumerable set\\n     * @param _mapKeyNamePrefix the LSP2 conforming mapping key name prefix of the ERC725Y enumerable set\\n     * @param _address the element to be checked for existence in the enumerable set\\n     */\\n    function getAddressIndexInEnumerableSet(\\n        bytes12 _mapKeyNamePrefix,\\n        address _address\\n    ) public view returns (uint) {\\n        bytes32 indexKeyName = _mapKeyNamePrefix.getMappedAddressKeyName(\\n            _address\\n        );\\n\\n        bytes memory addressIndexData = getData(indexKeyName);\\n        if (addressIndexData.length == 0) {\\n            return 0;\\n        }\\n\\n        uint index = abi.decode(addressIndexData, (uint));\\n        return index;\\n    }\\n\\n    /**\\n     * @notice Checks if the given address is in the specified enumerable set\\n     * @param _mapKeyNamePrefix the LSP2 conforming mapping key name prefix of the ERC725Y enumerable set\\n     * @param _address the element to be checked for existence in the enumerable set\\n     */\\n    function isAddressInEnumerableSet(\\n        bytes12 _mapKeyNamePrefix,\\n        address _address\\n    ) public view returns (bool) {\\n        return getAddressIndexInEnumerableSet(_mapKeyNamePrefix, _address) != 0;\\n    }\\n\\n    /**\\n     * @notice Returns the total count of entries in the enumerable set\\n     * @param _arrayKeyName the LSP2 conforming array key name of the ERC725Y enumerable set\\n     */\\n    function length(bytes32 _arrayKeyName) public view returns (uint) {\\n        bytes memory arrayLengthData = getData(_arrayKeyName);\\n        if (arrayLengthData.length == 0) {\\n            return 0;\\n        }\\n        uint arrayLength = abi.decode(arrayLengthData, (uint));\\n        return arrayLength;\\n    }\\n}\\n\",\"keccak256\":\"0x1faa3d04526338bd939ed11e04e96e86ae1d78b05400201cfb46e9d762d1336c\",\"license\":\"Apache-2.0\"},\"contracts/ISocialNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// third party\\nimport {ILSP8IdentifiableDigitalAsset} from \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/ILSP8IdentifiableDigitalAsset.sol\\\";\\n\\n// local\\nimport {SocialNetworkPostType} from \\\"./SocialNetworkPostType.sol\\\";\\n\\n/**\\n * @title Social Network Interface\\n * @author Dennis Tuszynski\\n * @dev Interface which describes all the necessary events and function declarations for a SocialNetwork contract.\\n */\\ninterface ISocialNetwork is ILSP8IdentifiableDigitalAsset {\\n    /**\\n     * @dev Emitted when `user` registered and linked to `socialProfileData`\\n     * @param user The address of the user who registered\\n     * @param socialProfileData The address of the deployed SocialNetworkProfileData contract address assigned to the `user`\\n     * @param userNumber The number of the user (incremented with each registration)\\n     * @param timestamp timestamp of the event\\n     */\\n    event UserRegistered(\\n        address indexed user,\\n        address indexed socialProfileData,\\n        uint indexed userNumber,\\n        uint timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when `user` liked `targetPost`\\n     * @param user The address of the user who liked\\n     * @param targetPost The address of the social network post that was liked\\n     * @param timestamp timestamp of the event\\n     */\\n    event UserLikedPost(\\n        address indexed user,\\n        address indexed targetPost,\\n        uint timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when `user` unliked `targetPost`\\n     * @param user The address of the user who liked\\n     * @param targetPost The address of the social network post that was unliked\\n     * @param timestamp timestamp of the event\\n     */\\n    event UserUnlikedPost(\\n        address indexed user,\\n        address indexed targetPost,\\n        uint timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when `user` subscribed `targetUser`\\n     * @param user The address of the user who subscribed\\n     * @param targetUser The address of the user who was subscribed\\n     * @param timestamp timestamp of the event\\n     */\\n    event UserSubscribedUser(\\n        address indexed user,\\n        address indexed targetUser,\\n        uint timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when `user` unsubscribed `targetUser`\\n     * @param user The address of the user who unsubscribed\\n     * @param targetUser The address of the user who was unsubscribed\\n     * @param timestamp timestamp of the event\\n     */\\n    event UserUnsubscribedUser(\\n        address indexed user,\\n        address indexed targetUser,\\n        uint timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when `user` created `newPost`. If new post is a comment or share then 'targetPost' contains the targeted post address.\\n     * @param postType The type of the post that was created (standalone, comment or share)\\n     * @param user The address of the user who created\\n     * @param newPost The address of the post that was created\\n     * @param targetPost The address of the post that was targeted (mandatory for comment and share)\\n     * @param timestamp timestamp of the event\\n     */\\n    event UserCreatedPost(\\n        SocialNetworkPostType indexed postType,\\n        address indexed user,\\n        address indexed targetPost,\\n        address newPost,\\n        uint timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when `user` tagged a `targetUser` in a `newPost`\\n     * @param user The address of the user who tagged\\n     * @param newPost The address of the post in which the `targetUser` was tagged\\n     * @param targetUser The address of the target user who was tagged\\n     * @param timestamp timestamp of the event\\n     */\\n    event UserTaggedUserInPost(\\n        address indexed user,\\n        address indexed newPost,\\n        address indexed targetUser,\\n        uint timestamp\\n    );\\n\\n    /**\\n     * @notice Registers a new user (msg.sender)\\n     */\\n    function register() external returns (address);\\n\\n    /**\\n     * @notice User (msg.sender) likes a post\\n     * @param _post The post to be liked\\n     */\\n    function likePost(address _post) external;\\n\\n    /**\\n     * @notice User (msg.sender) unlikes a post\\n     * @param _post The post to be unliked\\n     */\\n    function unlikePost(address _post) external;\\n\\n    /**\\n     * @notice User (msg.sender) subscribes an other user\\n     * @param _user The user to be subscribed\\n     */\\n    function subscribeUser(address _user) external;\\n\\n    /**\\n     * @notice User (msg.sender) unsubscribes an other user\\n     * @param _user The user to be unsubscribed\\n     */\\n    function unsubscribeUser(address _user) external;\\n\\n    /**\\n     * @notice User (msg.sender) creates a post\\n     * @param _data The post content data\\n     * @param _taggedUsers An array of tagged users (optional)\\n     */\\n    function createPost(bytes calldata _data, address[] calldata _taggedUsers)\\n        external\\n        returns (address);\\n\\n    /**\\n     * @notice User (msg.sender) comments a post\\n     * @param _data The comment post content data\\n     * @param _taggedUsers An array of tagged users (optional)\\n     * @param _targetPost The commented post\\n     */\\n    function commentPost(\\n        bytes calldata _data,\\n        address[] calldata _taggedUsers,\\n        address _targetPost\\n    ) external returns (address);\\n\\n    /**\\n     * @notice User (msg.sender) shares a post with a comment\\n     * @param _data The comment post content data\\n     * @param _taggedUsers An array of tagged users (optional)\\n     * @param _targetPost The shared post\\n     */\\n    function sharePost(\\n        bytes calldata _data,\\n        address[] calldata _taggedUsers,\\n        address _targetPost\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x916948bc73a17b50def7500c1b12cecaad4a3ec0fb8f08a15cd2b72c5411b978\",\"license\":\"Apache-2.0\"},\"contracts/ISocialNetworkPost.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// third party\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n// local\\nimport {SocialNetworkPostType} from \\\"./SocialNetworkPostType.sol\\\";\\n\\n/**\\n * @title Social Network Post Interface\\n * @author Dennis Tuszynski\\n * @dev Interface which describes all the function declarations for a SocialNetworkPost contract (LSP8 Token instance).\\n */\\ninterface ISocialNetworkPost is IERC165, IERC725Y {\\n    /**\\n     * @notice Returns the author of the post\\n     */\\n    function author() external view returns (address);\\n\\n    /**\\n     * @notice Returns the timestamp of the post\\n     */\\n    function timestamp() external view returns (uint);\\n\\n    /**\\n     * @notice Returns the type of the post\\n     */\\n    function postType() external view returns (SocialNetworkPostType);\\n\\n    /**\\n     * @notice Returns the referencedPost of the post\\n     */\\n    function referencedPost() external view returns (address);\\n    \\n    /**\\n     * @notice Checks if the given user is tagged in the post\\n     * @param _user address of the user to check\\n     */\\n    function isUserTagged(address _user) external view returns (bool);\\n\\n\\n    /**\\n     * @notice Checks if the given user liked the post\\n     * @param _user address of the user to check\\n     */\\n    function isLikedBy(address _user) external view returns (bool);\\n\\n    /**\\n     * @notice Adds user like to post\\n     * @param _user address of the user to be added to the enumerable set 'likes'\\n     */\\n    function addLike(address _user) external;\\n\\n    /**\\n     * @notice Removes user like from post\\n     * @param _user address of the user to be removed from the enumerable set 'likes'\\n     */\\n    function removeLike(address _user) external;\\n\\n    /**\\n     * @notice Adds comment to post\\n     * @param _comment address of the post to be added to the enumerable set 'comments'\\n     */\\n    function addComment(address _comment) external;\\n\\n    /**\\n     * @notice Adds share to post\\n     * @param _share address of the post to be added to the enumerable set 'shares'\\n     */\\n    function addShare(address _share) external;\\n}\\n\",\"keccak256\":\"0xf25f79a28ac1f39fce11acb7f3382355abf6c1d8fddaa3c20998a796ee0a7087\",\"license\":\"Apache-2.0\"},\"contracts/ISocialNetworkProfileData.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// third party\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title Social Network Profile Data Interface\\n * @author Dennis Tuszynski\\n * @dev Interface which describes the social network profile data that is 'assigned' to a universal profile.\\n * Storing the data within a separate contract instead of in the universal profile itself has the following advantages:\\n * - Prevention of data manipulation/corruption with manual 'setData' invocations by the universal profile owner, since only the managing SocialNetwork contract has write access\\n * - Reduction of gas cost because of direct data manipulation by the owning SocialMedia contract instead of going through the KeyManager (especially 'verifyPermissions')\\n * - Easier Onboarding of users since only a CALL permission with the SocialNetwork's contract address (ALLOWED ADDRESS) must be set on the universal profile's key manager\\n * - Existence of a SocialNetworkProfileData contract instance is comparable with a successful registration\\n * - (No validation modifiers necessary since validation is handled in managing SocialNetwork contract)\\n */\\ninterface ISocialNetworkProfileData is IERC165, IERC725Y {\\n       /**\\n     * @notice Returns the linked user profile of the profile data\\n     */\\n    function user() external view returns (address);\\n\\n    /**\\n     * @notice Returns the timestamp of the post\\n     */\\n    function timestamp() external view returns (uint);\\n\\n    /**\\n     * @notice Checks if the the social profile is tagged in the given post\\n     * @param _post address of the post to check\\n     */\\n    function isTaggedIn(address _post) external view returns (bool);\\n\\n    /**\\n     * @notice Adds tag to social profile\\n     * @param _post address of the post to be added to the enumerable set 'tags'\\n     */\\n    function addTag(address _post) external;\\n\\n    /**\\n     * @notice Checks if the the social profile is author of the given post\\n     * @param _post address of the post to check\\n     */\\n    function isAuthorOf(address _post) external view returns (bool);\\n\\n    /**\\n     * @notice Adds post to social profile\\n     * @param _post address of the post to be added to the enumerable set 'posts'\\n     */\\n    function addPost(address _post) external;\\n\\n    /**\\n     * @notice Checks if the given post is liked by the social profile\\n     * @param _post address of the post to check\\n     */\\n    function hasLiked(address _post) external view returns (bool);\\n\\n    /**\\n     * @notice Adds post like to social profile (action: post liked by user)\\n     * @param _post address of the post to be added to the enumerable set 'likes'\\n     */\\n    function addLike(address _post) external;\\n\\n    /**\\n     * @notice Removes post like from social profile (action: post unliked by user)\\n     * @param _post address of the post to be removed from the enumerable set 'likes'\\n     */\\n    function removeLike(address _post) external;\\n\\n    /**\\n     * @notice Checks if the given user subscribed the social profile\\n     * @param _user address of the user to check\\n     */\\n    function isSubscribedBy(address _user) external view returns (bool);\\n\\n    /**\\n     * @notice Adds subscriber to social profile\\n     * @param _user address of the user to be added to the enumerable set 'subscribers'\\n     */\\n    function addSubscriber(address _user) external;\\n\\n    /**\\n     * @notice Removes subscriber from social profile\\n     * @param _user address of the user to be removed from the enumerable set 'subscribers'\\n     */\\n    function removeSubscriber(address _user) external;\\n\\n    /**\\n     * @notice Checks if the the social profile subscribed the given user\\n     * @param _user address of the user to check\\n     */\\n    function isSubscriberOf(address _user) external view returns (bool);\\n\\n    /**\\n     * @notice Adds subscription to social profile\\n     * @param _user address of the user to be added to the enumerable set 'subscriptions'\\n     */\\n    function addSubscription(address _user) external;\\n\\n    /**\\n     * @notice Removes subscription from social profile\\n     * @param _user address of the user to be removed from the enumerable set 'subscriptions'\\n     */\\n    function removeSubscription(address _user) external;\\n}\\n\",\"keccak256\":\"0xdf5a2192713fbf8e9cd1f65621c77e9ea5e4adc3e879e129e0a7ea15b904db06\",\"license\":\"Apache-2.0\"},\"contracts/LSP2KeyUtil.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Custom LSP2 utils library: https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-2-ERC725YJSONSchema.md\\n * @author Dennis Tuszynski\\n * @dev Implementation of a library which adds some custom helper functions for calculating LSP2 conforming key names.\\n */\\nlibrary LSP2KeyUtil {\\n     /**\\n     * @notice Calculates LSP2 conforming key name for mapping type\\n     * @param _mapKeyNamePrefix the LSP2 conforming mapping key name prefix\\n     * @param _address the address to be used as the key name suffix (mapped address)\\n     */\\n    function getMappedAddressKeyName(bytes12 _mapKeyNamePrefix, address _address) external pure returns (bytes32) {\\n        return bytes32(bytes.concat(_mapKeyNamePrefix, bytes20(_address)));\\n    }\\n}\",\"keccak256\":\"0x3dd998a08b5a720bbc1cbf8063d12da0551585bcb248a0a47a5fb58c89cc0bee\",\"license\":\"Apache-2.0\"},\"contracts/SocialNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// third party\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {IERC725Y} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\nimport {_INTERFACEID_ERC725Y, _INTERFACEID_ERC725X} from \\\"@erc725/smart-contracts/contracts/constants.sol\\\";\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\nimport {_LSP4_METADATA_KEY} from \\\"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol\\\";\\nimport {LSP8IdentifiableDigitalAsset} from \\\"@lukso/lsp-smart-contracts/contracts/LSP8IdentifiableDigitalAsset/LSP8IdentifiableDigitalAsset.sol\\\";\\nimport {OwnableUnset} from \\\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\\\";\\n\\n// local\\nimport {ISocialNetwork} from \\\"./ISocialNetwork.sol\\\";\\nimport {SocialNetworkProfileDataFactory} from \\\"./SocialNetworkProfileDataFactory.sol\\\";\\nimport {ISocialNetworkProfileData} from \\\"./ISocialNetworkProfileData.sol\\\";\\nimport {SocialNetworkPostFactory} from \\\"./SocialNetworkPostFactory.sol\\\";\\nimport {ISocialNetworkPost} from \\\"./ISocialNetworkPost.sol\\\";\\nimport {SocialNetworkPostType} from \\\"./SocialNetworkPostType.sol\\\";\\n\\n// constants\\nimport \\\"./SocialNetworkConstants.sol\\\";\\n\\n/**\\n * @title Social Network Implementation\\n * @author Dennis Tuszynski\\n * @dev Contract module represents a social network.\\n */\\ncontract SocialNetwork is\\n    ISocialNetwork,\\n    LSP8IdentifiableDigitalAsset(\\\"Social Network Post\\\", \\\"SNP\\\", msg.sender)\\n{\\n    mapping(address => address) public registeredUsers; // mapping from universal profile to social network profile data\\n    uint public registeredUserCount = 0; // incremented with each registration\\n\\n    constructor(bytes memory _LSP4MetadataJSONURL) {\\n        // set token id type to be address (tokens => instances of SocialNetworkPost contract)\\n        setData(\\n            _LSP8_TOKEN_ID_TYPE,\\n            bytes(abi.encode(_LSP8_TOKEN_ID_TYPE_ADDRESS))\\n        );\\n        setData(_LSP4_METADATA_KEY, _LSP4MetadataJSONURL);\\n    }\\n\\n    /**\\n     * @notice Validates that the given address is a registered user\\n     * @param _user the user address to be checked\\n     */\\n    modifier onlyRegisteredUser(address _user) {\\n        require(\\n            registeredUsers[_user] != address(0),\\n            \\\"User address is not registered\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Validates that the given address is a valid post (instance of SocialNetworkPost contract)\\n     * @param _post the post address to be checked\\n     */\\n    modifier onlyValidPost(address _post) {\\n        require(\\n            IERC165(_post).supportsInterface(_INTERFACEID_SOCIAL_NETWORK_POST),\\n            \\\"Post address is not pointing to a valid post (SocialNetworkPost interface not available)\\\"\\n        );\\n        require(\\n            OwnableUnset(_post).owner() == address(this),\\n            \\\"Post address is not owned by current SocialNetwork contract instance\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Validates that the user has liked the post\\n     * @param _user the address of the user\\n     * @param _targetPost the address of the post\\n     */\\n    modifier onlyLikedPost(address _user, address _targetPost) {\\n        require(\\n            ISocialNetworkPost(_targetPost).isLikedBy(_user),\\n            \\\"User did not like the post yet\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Validates that the user has not liked the post\\n     * @param _user the address of the user\\n     * @param _targetPost the address of the post\\n     */\\n    modifier onlyNotLikedPost(address _user, address _targetPost) {\\n        require(\\n            !ISocialNetworkPost(_targetPost).isLikedBy(_user),\\n            \\\"User has already liked the post\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Validates that the user has subscribed the target user\\n     * @param _user the address of the user\\n     * @param _targetUser the address of the target user\\n     */\\n    modifier onlySubscribedUser(address _user, address _targetUser) {\\n        require(_user != _targetUser, \\\"Users must be different\\\");\\n        require(\\n            ISocialNetworkProfileData(registeredUsers[_user]).isSubscriberOf(\\n                _targetUser\\n            ),\\n            \\\"User is not a subscriber yet\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Validates that the user has not subscribed the target user\\n     * @param _user the address of the user\\n     * @param _targetUser the address of the target user\\n     */\\n    modifier onlyNotSubscribedUser(address _user, address _targetUser) {\\n        require(_user != _targetUser, \\\"Users must be different\\\");\\n        require(\\n            !ISocialNetworkProfileData(registeredUsers[_user]).isSubscriberOf(\\n                _targetUser\\n            ),\\n            \\\"User is already a subscriber\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Validates that the user is the author of the post\\n     * @param _user the address of the user\\n     * @param _targetPost the address of the post\\n     */\\n    modifier onlyPostAuthor(address _user, address _targetPost) {\\n        require(\\n            _user == ISocialNetworkPost(_targetPost).author(),\\n            \\\"User must be the post author\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Requires that the user is not the author of the post\\n     * @param _user the address of the user\\n     * @param _targetPost the address of the post\\n     */\\n    modifier onlyNotPostAuthor(address _user, address _targetPost) {\\n        require(\\n            _user != ISocialNetworkPost(_targetPost).author(),\\n            \\\"User must not be the post author\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetwork\\n     * @dev Creates a new instance of the SocialNetworkProfileData contract and links it to the sender address.\\n     * Fails if the sender address is not a universal profile or if the sender address is already registered.\\n     */\\n    function register() external returns (address) {\\n        require(\\n            registeredUsers[msg.sender] == address(0),\\n            \\\"User address is already registered\\\"\\n        );\\n        require(\\n            msg.sender.code.length > 0,\\n            \\\"User address is an EOA - Only smart contract based accounts are supported\\\"\\n        );\\n        require(\\n            IERC165(msg.sender).supportsInterface(_INTERFACEID_ERC725Y) &&\\n                IERC165(msg.sender).supportsInterface(_INTERFACEID_ERC725X),\\n            \\\"User address is not an universal profile (ERC725X and/or ERC725Y interfaces not available)\\\"\\n        );\\n\\n        ++registeredUserCount;\\n        registeredUsers[msg.sender] = SocialNetworkProfileDataFactory\\n            .createProfileData(address(this), msg.sender);\\n        emit UserRegistered(\\n            msg.sender,\\n            registeredUsers[msg.sender],\\n            registeredUserCount,\\n            block.timestamp\\n        );\\n\\n        return registeredUsers[msg.sender];\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetwork\\n     */\\n    function likePost(address _post)\\n        external\\n        onlyRegisteredUser(msg.sender)\\n        onlyValidPost(_post)\\n        onlyNotPostAuthor(msg.sender, _post)\\n        onlyNotLikedPost(msg.sender, _post)\\n    {\\n        ISocialNetworkPost(_post).addLike(msg.sender);\\n        ISocialNetworkProfileData(registeredUsers[msg.sender]).addLike(_post);\\n        emit UserLikedPost(msg.sender, _post, block.timestamp);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetwork\\n     */\\n    function unlikePost(address _post)\\n        external\\n        onlyRegisteredUser(msg.sender)\\n        onlyValidPost(_post)\\n        onlyNotPostAuthor(msg.sender, _post)\\n        onlyLikedPost(msg.sender, _post)\\n    {\\n        ISocialNetworkPost(_post).removeLike(msg.sender);\\n        ISocialNetworkProfileData(registeredUsers[msg.sender]).removeLike(\\n            _post\\n        );\\n        emit UserUnlikedPost(msg.sender, _post, block.timestamp);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetwork\\n     */\\n    function subscribeUser(address _user)\\n        external\\n        onlyRegisteredUser(msg.sender)\\n        onlyRegisteredUser(_user)\\n        onlyNotSubscribedUser(msg.sender, _user)\\n    {\\n        ISocialNetworkProfileData(registeredUsers[msg.sender]).addSubscription(\\n            _user\\n        );\\n        ISocialNetworkProfileData(registeredUsers[_user]).addSubscriber(\\n            msg.sender\\n        );\\n        emit UserSubscribedUser(msg.sender, _user, block.timestamp);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetwork\\n     */\\n    function unsubscribeUser(address _user)\\n        external\\n        onlyRegisteredUser(msg.sender)\\n        onlyRegisteredUser(_user)\\n        onlySubscribedUser(msg.sender, _user)\\n    {\\n        ISocialNetworkProfileData(registeredUsers[msg.sender])\\n            .removeSubscription(_user);\\n        ISocialNetworkProfileData(registeredUsers[_user]).removeSubscriber(\\n            msg.sender\\n        );\\n        emit UserUnsubscribedUser(msg.sender, _user, block.timestamp);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetwork\\n     */\\n    function createPost(bytes calldata _data, address[] calldata _taggedUsers)\\n        external\\n        onlyRegisteredUser(msg.sender)\\n        returns (address)\\n    {\\n        address post = SocialNetworkPostFactory.createPost(\\n            address(this),\\n            msg.sender,\\n            _data,\\n            _taggedUsers\\n        );\\n\\n        _mint(\\n            msg.sender,\\n            bytes32(bytes.concat(bytes12(0), bytes20(post))),\\n            false,\\n            \\\"\\\"\\n        );\\n\\n        ISocialNetworkProfileData(registeredUsers[msg.sender]).addPost(post);\\n\\n        emit UserCreatedPost(SocialNetworkPostType.STANDALONE, msg.sender, address(0), post, block.timestamp);\\n        handleUserTags(post, _taggedUsers);\\n\\n        return post;\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetwork\\n     */\\n    function commentPost(\\n        bytes calldata _data,\\n        address[] calldata _taggedUsers,\\n        address _targetPost\\n    )\\n        external\\n        onlyRegisteredUser(msg.sender)\\n        onlyValidPost(_targetPost)\\n        returns (address)\\n    {\\n        address post = SocialNetworkPostFactory.createCommentPost(\\n            address(this),\\n            msg.sender,\\n            _data,\\n            _taggedUsers,\\n            _targetPost\\n        );\\n\\n        _mint(\\n            msg.sender,\\n            bytes32(bytes.concat(bytes12(0), bytes20(post))),\\n            false,\\n            \\\"\\\"\\n        );\\n\\n        ISocialNetworkPost(_targetPost).addComment(post);\\n        ISocialNetworkProfileData(registeredUsers[msg.sender]).addPost(post);\\n\\n        emit UserCreatedPost(SocialNetworkPostType.COMMENT, msg.sender, _targetPost, post, block.timestamp);\\n        handleUserTags(post, _taggedUsers);\\n\\n        return post;\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetwork\\n     */\\n    function sharePost(\\n        bytes calldata _data,\\n        address[] calldata _taggedUsers,\\n        address _targetPost\\n    )\\n        external\\n        onlyRegisteredUser(msg.sender)\\n        onlyValidPost(_targetPost)\\n        returns (address)\\n    {\\n        address post = SocialNetworkPostFactory.createSharePost(\\n            address(this),\\n            msg.sender,\\n            _data,\\n            _taggedUsers,\\n            _targetPost\\n        );\\n\\n        _mint(\\n            msg.sender,\\n            bytes32(bytes.concat(bytes12(0), bytes20(post))),\\n            false,\\n            \\\"\\\"\\n        );\\n\\n        ISocialNetworkPost(_targetPost).addShare(post);\\n        ISocialNetworkProfileData(registeredUsers[msg.sender]).addPost(post);\\n\\n        emit UserCreatedPost(SocialNetworkPostType.SHARE, msg.sender, _targetPost, post, block.timestamp);\\n        handleUserTags(post, _taggedUsers);\\n\\n        return post;\\n    }\\n\\n    /**\\n     * @notice Emits UserTaggedUserInPost events and adds the given post to the according enumerable set of each user's social profile data contract instance.\\n     * @param _post The post in which the users were tagged\\n     * @param _taggedUsers The array of the users who were tagged\\n     */\\n    function handleUserTags(address _post, address[] calldata _taggedUsers)\\n        internal\\n    {\\n        uint taggedUsersLength = _taggedUsers.length;\\n        for (uint i = 0; i < taggedUsersLength; ++i) {\\n            handleUserTag(_post, _taggedUsers[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Emits UserTaggedUserInPost event and adds the given post to the according enumerable set of the user's social profile data contract instance.\\n     * @param _post The post in which the user was tagged\\n     * @param _taggedUser The address of the user who was tagged\\n     */\\n    function handleUserTag(address _post, address _taggedUser)\\n        internal\\n        onlyRegisteredUser(_taggedUser)\\n    {\\n        ISocialNetworkProfileData(registeredUsers[_taggedUser]).addTag(_post);\\n\\n        emit UserTaggedUserInPost(\\n            msg.sender,\\n            _post,\\n            _taggedUser,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, LSP8IdentifiableDigitalAsset)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == _INTERFACEID_SOCIAL_NETWORK ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x5390986e6cfdcde1aa9e8b12e6b04cc78a6c1ceb209ee2d1fd543da2f1e42226\",\"license\":\"Apache-2.0\"},\"contracts/SocialNetworkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// >> ERC165 INTERFACE ID\\nbytes4 constant _INTERFACEID_SOCIAL_NETWORK = 0x52ae1080; // calculated according to https://eips.ethereum.org/EIPS/eip-165\\nbytes4 constant _INTERFACEID_SOCIAL_NETWORK_PROFILE_DATA = 0x9b0fef4c; // calculated according to https://eips.ethereum.org/EIPS/eip-165\\nbytes4 constant _INTERFACEID_SOCIAL_NETWORK_POST = 0x8ef076aa; // calculated according to https://eips.ethereum.org/EIPS/eip-165\\n\\n// >> ERC725Y entries\\nuint constant _LSP8_TOKEN_ID_TYPE_ADDRESS = 1; // see https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-8-IdentifiableDigitalAsset.md\\nbytes32 constant _LSP8_TOKEN_ID_TYPE = 0x715f248956de7ce65e94d9d836bfead479f7e70d69b718d47bfe7b00e05b4fe4; // see https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-8-IdentifiableDigitalAsset.md\\nbytes32 constant _LSP8_TOKEN_ID_METADATA_MINTED_BY = 0xa0093ef0f6788cc87a372bbd12cf83ae7eeb2c85b87e43517ffd5b3978d356c9; // see https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-8-IdentifiableDigitalAsset.md\\nbytes32 constant _LSP8_TOKEN_ID_METADATA_TOKEN_ID = 0x51ea539c2c3a29af57cb4b60be9d43689bfa633dba8613743d1be7fb038d36c3; // see https://github.com/lukso-network/LIPs/blob/main/LSPs/LSP-8-IdentifiableDigitalAsset.md\\n\\n// ERC725Y LSP8 Metadata Contract - Post Content Key\\n// {\\\"name\\\":\\\"SNPostContent\\\",\\\"key\\\":\\\"0x267100e4b0ea7c1e884866329768f0a9762ecf93ab52ada79174c067d41c4e15\\\",\\\"keyType\\\":\\\"Singleton\\\",\\\"valueType\\\":\\\"bytes\\\",\\\"valueContent\\\":\\\"JSONURL\\\"}\\nbytes32 constant _LSP8_TOKEN_ID_METADATA_SN_POST_CONTENT = 0x267100e4b0ea7c1e884866329768f0a9762ecf93ab52ada79174c067d41c4e15;\\n\\n// ERC725Y EnumerableSet keys for Social Network Likes (map points to index in array, array contains universal profile addresses)\\nbytes32 constant _SN_LIKES_ARRAY_KEY = 0xd74f936d1543a0f1abf8190b00fe9837297a24c4b3d832915264e825bc3fc0c8; // keccak256('SNLikes[]')\\nbytes12 constant _SN_LIKES_MAP_KEY = 0x1e3d423e52a0cd35309e0000; // bytes10(keccak256('SNLikes')) + bytes2(0)\\n\\n// ERC725Y EnumerableSet keys for Social Network Comments (map points to index in array, array contains social network post addresses)\\nbytes32 constant _SN_COMMENTS_ARRAY_KEY = 0xf2f114f920273bcb634939f1c6afd35a362fe32c9fe59f4a8c08d77fd74280dd; // keccak256('SNComments[]')\\nbytes12 constant _SN_COMMENTS_MAP_KEY = 0x9178381cc16012dc81a10000; // bytes10(keccak256('SNComments')) + bytes2(0)\\n\\n// ERC725Y EnumerableSet keys for Social Network Shares (map points to index in array, array contains social network post addresses)\\nbytes32 constant _SN_SHARES_ARRAY_KEY = 0x72f27ddc359c9a543c3194ffa294ca7f32bed33c7d644a22949516d73c870ad8; // keccak256('SNShares[]')\\nbytes12 constant _SN_SHARES_MAP_KEY = 0x5fd6332ee7f2fac51c230000; // bytes10(keccak256('SNShares')) + bytes2(0)\\n\\n// ERC725Y EnumerableSet keys for Social Network Subscriptions (map points to index in array, array contains universal profile addresses)\\nbytes32 constant _SN_SUBSCRIPTIONS_ARRAY_KEY = 0x5a1ba2b446b30525fe4638569ee418eac7ca8fcc0a03f2c4843dd04d27e8c1ac; // keccak256('SNSubscriptions[]')\\nbytes12 constant _SN_SUBSCRIPTIONS_MAP_KEY = 0xc108b10b147caa96224e0000; // bytes10(keccak256('SNSubscriptions')) + bytes2(0)\\n\\n// ERC725Y EnumerableSet keys for Social Network Subscribers (map points to index in array, array contains universal profile addresses)\\nbytes32 constant _SN_SUBSCRIBERS_ARRAY_KEY = 0x8a82c15a8cea01b6a5d0db3b14e480dfe3197f0aa048e916d77b79abcc7a697c; // keccak256('SNSubscribers[]')\\nbytes12 constant _SN_SUBSCRIBERS_MAP_KEY = 0x90f039af6118e0ccbbd00000; // bytes10(keccak256('SNSubscribers')) + bytes2(0)\\n\\n// ERC725Y EnumerableSet keys for Social Network User Tags (map points to index in array, array contains universal profile addresses)\\nbytes32 constant _SN_USER_TAGS_ARRAY_KEY = 0xafd89daf17abdaf5797bc0e7d4dbdc56a217d1b6e08b426b40b8f99b9a03fc6c; // keccak256('SNUserTags[]')\\nbytes12 constant _SN_USER_TAGS_MAP_KEY = 0x6737a26dc0027d9a47570000; // bytes10(keccak256('SNUserTags')) + bytes2(0)\\n\\n// ERC725Y EnumerableSet keys for Social Network Posts (map points to index in array, array contains social network post addresses)\\nbytes32 constant _SN_POSTS_ARRAY_KEY = 0xe01ddb6ad4391dac642308cf420c56ac6a269002a7475dafeee62ea09be7a114; // keccak256('SNPosts[]')\\nbytes12 constant _SN_POSTS_MAP_KEY = 0x7e8492281728d34c260d0000; // bytes10(keccak256('SNPosts')) + bytes2(0)\",\"keccak256\":\"0x3477b472f1b101972bb3a9ed3cae83c5b6d98d3b9270be225562eb2c39408a73\",\"license\":\"Apache-2.0\"},\"contracts/SocialNetworkPost.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// third party\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {IERC725Y} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\n\\n// local\\nimport {ERC725YEnumerableSetUtil} from \\\"./ERC725YEnumerableSetUtil.sol\\\";\\nimport {ISocialNetworkPost} from \\\"./ISocialNetworkPost.sol\\\";\\nimport {SocialNetworkPostType} from \\\"./SocialNetworkPostType.sol\\\";\\n\\n// constants\\nimport \\\"./SocialNetworkConstants.sol\\\";\\n\\n/**\\n * @title Social Network Post Implementation\\n * @author Dennis Tuszynski\\n * @dev Contract module represents a social network post (LSP8 - Identifiable Asset).\\n */\\ncontract SocialNetworkPost is ISocialNetworkPost, ERC725YEnumerableSetUtil {\\n    uint public timestamp;\\n    address public author;\\n    SocialNetworkPostType public postType;\\n    address public referencedPost;\\n\\n    /**\\n     * @notice Sets the contract variables and the ERC725Y JSONURL key that references the post content\\n     * @param _owner The owner address\\n     * @param _author address of the user who is the author of the post/share/comment\\n     * @param _postType post type enum value: STANDALONE (normal post), SHARE or COMMENT\\n     * @param _taggedUsers array of user addresses who are tagged in this post (max 3)\\n     * @param _data post content's json url formatted according to LSP2 JSONURL\\n     * @param _referencedPost if _postType is equal to STANDALONE then address(0) otherwise address of referenced post\\n     */\\n    constructor(\\n        address _owner,\\n        address _author,\\n        SocialNetworkPostType _postType,\\n        address[] memory _taggedUsers,\\n        bytes memory _data,\\n        address _referencedPost\\n    ) ERC725YEnumerableSetUtil(_owner) {\\n        require(\\n            _postType == SocialNetworkPostType.STANDALONE ||\\n                IERC165(_referencedPost).supportsInterface(\\n                    _INTERFACEID_SOCIAL_NETWORK_POST\\n                ),\\n            \\\"Target post address must support the SOCIAL_NETWORK_POST interface (ERC165)\\\"\\n        );\\n        require(_taggedUsers.length <= 3, \\\"Amount of tagged users is greater than 3\\\");\\n        if(_taggedUsers.length == 2){\\n            require(_taggedUsers[0] != _taggedUsers[1], \\\"Tagged users must be different\\\");\\n        }else if(_taggedUsers.length == 3){\\n            require(_taggedUsers[0] != _taggedUsers[1] && _taggedUsers[1] != _taggedUsers[2] && _taggedUsers[0] != _taggedUsers[2], \\\"Tagged users must be different\\\");\\n        }\\n\\n        author = _author;\\n        postType = _postType;\\n        referencedPost = _postType == SocialNetworkPostType.STANDALONE\\n            ? address(0)\\n            : _referencedPost;\\n        timestamp = block.timestamp;\\n\\n        // adds tagged users to ERC725Y based enumerable set\\n        uint taggedUserAmount = _taggedUsers.length;\\n        for (uint i = 0; i < taggedUserAmount; ++i) {\\n            addElementToEnumerableSet(\\n                _SN_USER_TAGS_MAP_KEY,\\n                _SN_USER_TAGS_ARRAY_KEY,\\n                _taggedUsers[i]\\n            );\\n        }\\n\\n        setData(\\n            _LSP8_TOKEN_ID_METADATA_MINTED_BY,\\n            abi.encode(_author)\\n        );\\n        setData(\\n            _LSP8_TOKEN_ID_METADATA_TOKEN_ID,\\n            bytes.concat(bytes12(0), bytes20(address(this)))\\n        );\\n        setData(_LSP8_TOKEN_ID_METADATA_SN_POST_CONTENT, _data);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkPost\\n     */\\n    function isUserTagged(address _user) external view returns (bool) {\\n        return isAddressInEnumerableSet(_SN_USER_TAGS_MAP_KEY, _user);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkPost\\n     */\\n    function isLikedBy(address _user) external view returns (bool) {\\n        return isAddressInEnumerableSet(_SN_LIKES_MAP_KEY, _user);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkPost\\n     */\\n    function addLike(address _user) external onlyOwner {\\n        addElementToEnumerableSet(\\n            _SN_LIKES_MAP_KEY,\\n            _SN_LIKES_ARRAY_KEY,\\n            _user\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkPost\\n     */\\n    function removeLike(address _user) external onlyOwner {\\n        removeElementFromEnumerableSet(\\n            _SN_LIKES_MAP_KEY,\\n            _SN_LIKES_ARRAY_KEY,\\n            _user\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkPost\\n     */\\n    function addComment(address _comment) external onlyOwner {\\n        addElementToEnumerableSet(\\n            _SN_COMMENTS_MAP_KEY,\\n            _SN_COMMENTS_ARRAY_KEY,\\n            _comment\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkPost\\n     */\\n    function addShare(address _share) external onlyOwner {\\n        addElementToEnumerableSet(\\n            _SN_SHARES_MAP_KEY,\\n            _SN_SHARES_ARRAY_KEY,\\n            _share\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC725YCore)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == _INTERFACEID_SOCIAL_NETWORK_POST ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x20c73b5d39ae721242118248e5c60ef20dbc03540b49df658aceff852ebfec3f\",\"license\":\"Apache-2.0\"},\"contracts/SocialNetworkPostFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// local\\nimport {SocialNetworkPost} from \\\"./SocialNetworkPost.sol\\\";\\nimport {SocialNetworkPostType} from \\\"./SocialNetworkPostType.sol\\\";\\n\\n/**\\n * @title SocialNetworkPost contract instance factory\\n * @author Dennis Tuszynski\\n * @dev Generates instances of the SocialNetworkPost contract.\\n */\\nlibrary SocialNetworkPostFactory {\\n    /**\\n     * @notice Creates a new post of type STANDALONE\\n     * @param _owner The owning SocialNetwork contract instance\\n     * @param _author The user who created the post\\n     * @param _data The post content data (LSP2 JSONURL)\\n     * @param _taggedUsers The array of tagged users (optional)\\n     */\\n    function createPost(\\n        address _owner,\\n        address _author,\\n        bytes calldata _data,\\n        address[] calldata _taggedUsers\\n    ) public returns (address) {\\n        return\\n            address(\\n                new SocialNetworkPost(\\n                    _owner,\\n                    _author,\\n                    SocialNetworkPostType.STANDALONE,\\n                    _taggedUsers,\\n                    _data,\\n                    address(0)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Creates a new post of type COMMENT\\n     * @param _owner The owning SocialNetwork contract instance\\n     * @param _author The user who created the comment\\n     * @param _data The comment post content data (LSP2 JSONURL)\\n     * @param _taggedUsers The array of tagged users (optional)\\n     * @param _targetPost The commented post\\n     */\\n    function createCommentPost(\\n        address _owner,\\n        address _author,\\n        bytes calldata _data,\\n        address[] calldata _taggedUsers,\\n        address _targetPost\\n    ) public returns (address) {\\n        return\\n            address(\\n                new SocialNetworkPost(\\n                    _owner,\\n                    _author,\\n                    SocialNetworkPostType.COMMENT,\\n                    _taggedUsers,\\n                    _data,\\n                    _targetPost\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Creates a new post of type SHARE\\n     * @param _owner The owning SocialNetwork contract instance\\n     * @param _author The user who created the share\\n     * @param _data The share post content data (LSP2 JSONURL)\\n     * @param _taggedUsers The array of tagged users (optional)\\n     * @param _targetPost The shared post\\n     */\\n    function createSharePost(\\n        address _owner,\\n        address _author,\\n        bytes calldata _data,\\n        address[] calldata _taggedUsers,\\n        address _targetPost\\n    ) public returns (address) {\\n        return\\n            address(\\n                new SocialNetworkPost(\\n                    _owner,\\n                    _author,\\n                    SocialNetworkPostType.SHARE,\\n                    _taggedUsers,\\n                    _data,\\n                    _targetPost\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xcf85190470bb74bd402a4fc45f4e2ccad2e2db84f3059243ed9cb43e228e5d7b\",\"license\":\"Apache-2.0\"},\"contracts/SocialNetworkPostType.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title SocialNetworkPostType\\n * @author Dennis Tuszynski\\n * @dev Enum which represents the social network post types.\\n */\\nenum SocialNetworkPostType {\\n    STANDALONE,\\n    COMMENT,\\n    SHARE\\n}\\n\",\"keccak256\":\"0xc894c1f100aa91ace92a85ec2da99b44bf48d985739c7ed8b0ce3983b34b166c\",\"license\":\"Apache-2.0\"},\"contracts/SocialNetworkProfileData.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// third party\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\n\\n// local\\nimport {ERC725YEnumerableSetUtil} from \\\"./ERC725YEnumerableSetUtil.sol\\\";\\nimport {ISocialNetworkProfileData} from \\\"./ISocialNetworkProfileData.sol\\\";\\n\\n// constants\\nimport \\\"./SocialNetworkConstants.sol\\\";\\n\\n/**\\n * @title Social Network Profile Data Implementation\\n * @author Dennis Tuszynski\\n * @dev Contract module represents the social network profile data which is 'assigned' to a universal profile.\\n * Storing the data within a separate contract instead of in the universal profile itself has the following advantages:\\n * - Prevention of data manipulation/corruption with manual 'setData' invocations by the universal profile owner, since only the managing SocialNetwork contract has write access\\n * - Reduction of gas cost because of direct data manipulation by the owning SocialMedia contract instead of going through the KeyManager (especially 'verifyPermissions')\\n * - Easier Onboarding of users since only a CALL permission with the SocialNetwork's contract address (ALLOWED ADDRESS) must be set on the universal profile's key manager\\n * - Existence of a SocialNetworkProfileData contract instance is comparable with a successful registration\\n * - (No validation modifiers necessary since validation is handled in managing SocialNetwork contract)\\n */\\ncontract SocialNetworkProfileData is\\n    ISocialNetworkProfileData,\\n    ERC725YEnumerableSetUtil\\n{\\n    address public user; // Universal profile\\n    uint public timestamp;\\n\\n    /**\\n     * @notice Sets the contract variables\\n     * @param _owner The owner address\\n     * @param _user address of the user who is linked to the social network profile data\\n     */\\n    constructor(address _owner, address _user)\\n        ERC725YEnumerableSetUtil(_owner)\\n    {\\n        user = _user;\\n        timestamp = block.timestamp;\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function isTaggedIn(address _post) external view returns (bool) {\\n        return isAddressInEnumerableSet(_SN_USER_TAGS_MAP_KEY, _post);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function addTag(address _post) external onlyOwner {\\n        addElementToEnumerableSet(\\n            _SN_USER_TAGS_MAP_KEY,\\n            _SN_USER_TAGS_ARRAY_KEY,\\n            _post\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function isAuthorOf(address _post) external view returns (bool) {\\n        return isAddressInEnumerableSet(_SN_POSTS_MAP_KEY, _post);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function addPost(address _post) external onlyOwner {\\n        addElementToEnumerableSet(\\n            _SN_POSTS_MAP_KEY,\\n            _SN_POSTS_ARRAY_KEY,\\n            _post\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function hasLiked(address _post) external view returns (bool) {\\n        return isAddressInEnumerableSet(_SN_LIKES_MAP_KEY, _post);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function addLike(address _post) external onlyOwner {\\n        addElementToEnumerableSet(\\n            _SN_LIKES_MAP_KEY,\\n            _SN_LIKES_ARRAY_KEY,\\n            _post\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function removeLike(address _post) external onlyOwner {\\n        removeElementFromEnumerableSet(\\n            _SN_LIKES_MAP_KEY,\\n            _SN_LIKES_ARRAY_KEY,\\n            _post\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function isSubscribedBy(address _user) external view returns (bool) {\\n        return isAddressInEnumerableSet(_SN_SUBSCRIBERS_MAP_KEY, _user);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function addSubscriber(address _user) external onlyOwner {\\n        addElementToEnumerableSet(\\n            _SN_SUBSCRIBERS_MAP_KEY,\\n            _SN_SUBSCRIBERS_ARRAY_KEY,\\n            _user\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function removeSubscriber(address _user) external onlyOwner {\\n        removeElementFromEnumerableSet(\\n            _SN_SUBSCRIBERS_MAP_KEY,\\n            _SN_SUBSCRIBERS_ARRAY_KEY,\\n            _user\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function isSubscriberOf(address _user) external view returns (bool) {\\n        return isAddressInEnumerableSet(_SN_SUBSCRIPTIONS_MAP_KEY, _user);\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function addSubscription(address _user) external onlyOwner {\\n        addElementToEnumerableSet(\\n            _SN_SUBSCRIPTIONS_MAP_KEY,\\n            _SN_SUBSCRIPTIONS_ARRAY_KEY,\\n            _user\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ISocialNetworkProfileData\\n     */\\n    function removeSubscription(address _user) external onlyOwner {\\n        removeElementFromEnumerableSet(\\n            _SN_SUBSCRIPTIONS_MAP_KEY,\\n            _SN_SUBSCRIPTIONS_ARRAY_KEY,\\n            _user\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC725YCore)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == _INTERFACEID_SOCIAL_NETWORK_PROFILE_DATA ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8b645ef34cc656b3c709b667ed04ecf2d11c4b7fab1114f69cc489b43876829f\",\"license\":\"Apache-2.0\"},\"contracts/SocialNetworkProfileDataFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.9;\\n\\n// local\\nimport {SocialNetworkProfileData} from \\\"./SocialNetworkProfileData.sol\\\";\\n\\n/**\\n * @title SocialNetworkProfileData contract instance factory\\n * @author Dennis Tuszynski\\n * @dev Generates instances of the SocialNetworkProfileData contract\\n */\\nlibrary SocialNetworkProfileDataFactory {\\n    /**\\n     * @notice Creates a new social network profile data contract instance\\n     * @param _owner The owning SocialNetwork contract instance\\n     * @param _user The user who is linked to the profile data (assignment)\\n     */\\n    function createProfileData(\\n        address _owner,\\n        address _user\\n    ) public returns (address) {\\n        return\\n            address(\\n                new SocialNetworkProfileData(\\n                    _owner,\\n                    _user\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xffa93811efcccb555e15629fc0a1971d0388d00622b37c44d5b2ce442b453c61\",\"license\":\"Apache-2.0\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405260006007553480156200001657600080fd5b50604051620050be380380620050be833981016040819052620000399162000453565b6040518060400160405280601381526020017f536f6369616c204e6574776f726b20506f737400000000000000000000000000815250604051806040016040528060038152602001620534e560ec1b8152503382828280620000a681620001db60201b62002e191760201c565b50620000fd7feafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c60001b604051806040016040528060048152602001632936598960e21b8152506200024260201b62002e961760201c565b620001266000805160206200507e83398151915260001b846200024260201b62002e961760201c565b6200014f6000805160206200509e83398151915260001b836200024260201b62002e961760201c565b505050505050620001a87f715f248956de7ce65e94d9d836bfead479f7e70d69b718d47bfe7b00e05b4fe460001b60016040516020016200019291815260200190565b60408051601f1981840301815291905262000293565b620001d47f9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e8262000293565b506200056c565b6000546001600160a01b038281169116146200023f57600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a3505b50565b60008281526001602090815260409091208251620002639284019062000397565b5060405182907fcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b90600090a25050565b6200029d620002ad565b620002a982826200031e565b5050565b33620002c16000546001600160a01b031690565b6001600160a01b0316146200031c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b6000805160206200507e8339815191528214156200034f576040516385c169bd60e01b815260040160405180910390fd5b6000805160206200509e8339815191528214156200038057604051630eceab6760e31b815260040160405180910390fd5b620002a982826200024260201b62002e961760201c565b828054620003a5906200052f565b90600052602060002090601f016020900481019282620003c9576000855562000414565b82601f10620003e457805160ff191683800117855562000414565b8280016001018555821562000414579182015b8281111562000414578251825591602001919060010190620003f7565b506200042292915062000426565b5090565b5b8082111562000422576000815560010162000427565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200046757600080fd5b82516001600160401b03808211156200047f57600080fd5b818501915085601f8301126200049457600080fd5b815181811115620004a957620004a96200043d565b604051601f8201601f19908116603f01168101908382118183101715620004d457620004d46200043d565b816040528281528886848701011115620004ed57600080fd5b600093505b82841015620005115784840186015181850187015292850192620004f2565b82841115620005235760008684830101525b98975050505050505050565b600181811c908216806200054457607f821691505b602082108114156200056657634e487b7160e01b600052602260045260246000fd5b50919050565b614b02806200057c6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806365c12877116100f9578063b2fd625c11610097578063e7c4ece511610071578063e7c4ece5146103e7578063f0e7a43c146103fa578063f2fde38b1461040d578063fc7200311461042057600080fd5b8063b2fd625c146103b8578063cb3d0564146103cb578063cf5182ba146103d457600080fd5b80637659c8c9116100d35780637659c8c9146103615780637f23690c146103745780638da5cb5b14610387578063a3b261f21461039857600080fd5b806365c128771461033357806370a0823114610346578063715018a61461035957600080fd5b8063217b2270116101665780634e3e6e9c116101405780634e3e6e9c146102cd578063511b6952146102ed57806354f6127f14610300578063559088681461032057600080fd5b8063217b2270146102875780632a3654a41461029a57806349a6078d146102ad57600080fd5b80630e50cee5116101a25780630e50cee51461021957806314a6e2931461025a57806318160ddd1461026d5780631aa3a0081461027f57600080fd5b806301ffc9a7146101c957806302397a82146101f15780630b0c6d8214610206575b600080fd5b6101dc6101d7366004613eb4565b610433565b60405190151581526020015b60405180910390f35b6102046101ff366004613f0b565b61048f565b005b610204610214366004613f28565b610a59565b610242610227366004613f0b565b6006602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b61020461026836600461413c565b610b34565b6002545b6040519081526020016101e8565b610242610c08565b6102426102953660046141a0565b61106b565b6101dc6102a8366004613f28565b6110bd565b6102c06102bb3660046141a0565b6110d9565b6040516101e891906141b9565b6102e06102db366004614206565b6110fb565b6040516101e89190614293565b6102046102fb366004614321565b6111af565b61031361030e3660046141a0565b611217565b6040516101e891906143a0565b61020461032e366004614417565b611222565b61024261034136600461455a565b611308565b610271610354366004613f0b565b611859565b61020461187a565b61020461036f366004613f0b565b61188e565b6102046103823660046145de565b611bfc565b6000546001600160a01b0316610242565b6103ab6103a6366004613f0b565b611c12565b6040516101e8919061461b565b6102426103c6366004614653565b611c36565b61027160075481565b6102046103e2366004613f28565b611e74565b6102046103f5366004613f0b565b611f9e565b610204610408366004613f0b565b612555565b61020461041b366004613f0b565b6128b7565b61024261042e36600461455a565b612947565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f52ae1080000000000000000000000000000000000000000000000000000000001480610489575061048982612ee5565b92915050565b336000818152600660205260409020546001600160a01b03166104f95760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064015b60405180910390fd5b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f8ef076aa00000000000000000000000000000000000000000000000000000000600482015282906001600160a01b038216906301ffc9a79060240160206040518083038186803b15801561057357600080fd5b505afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab91906146bf565b6106435760405162461bcd60e51b815260206004820152605860248201527f506f73742061646472657373206973206e6f7420706f696e74696e6720746f2060448201527f612076616c696420706f73742028536f6369616c4e6574776f726b506f73742060648201527f696e74657266616365206e6f7420617661696c61626c65290000000000000000608482015260a4016104f0565b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561068657600080fd5b505afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be91906146dc565b6001600160a01b0316146107615760405162461bcd60e51b8152602060048201526044602482018190527f506f73742061646472657373206973206e6f74206f776e656420627920637572908201527f72656e7420536f6369616c4e6574776f726b20636f6e747261637420696e737460648201527f616e636500000000000000000000000000000000000000000000000000000000608482015260a4016104f0565b3383806001600160a01b031663a6c3e6b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d491906146dc565b6001600160a01b0316826001600160a01b031614156108355760405162461bcd60e51b815260206004820181905260248201527f55736572206d757374206e6f742062652074686520706f737420617574686f7260448201526064016104f0565b6040517f6038b7f800000000000000000000000000000000000000000000000000000000815233600482018190529086906001600160a01b03821690636038b7f89060240160206040518083038186803b15801561089257600080fd5b505afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca91906146bf565b156109175760405162461bcd60e51b815260206004820152601f60248201527f557365722068617320616c7265616479206c696b65642074686520706f73740060448201526064016104f0565b6040517f888b9afe0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0388169063888b9afe90602401600060405180830381600087803b15801561097157600080fd5b505af1158015610985573d6000803e3d6000fd5b505033600090815260066020526040908190205490517f888b9afe0000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152909116925063888b9afe9150602401600060405180830381600087803b1580156109f757600080fd5b505af1158015610a0b573d6000803e3d6000fd5b50506040514281526001600160a01b038a1692503391507f876663551057bbf491fadeab49176312ba3c80adb2edaaabbe66a39b8b41e986906020015b60405180910390a350505050505050565b6000610a648261106b565b9050336001600160a01b0382168114610ac3576040517f5b271ea20000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015260248201859052821660448201526064016104f0565b6001600160a01b038416610b03576040517f9577b8b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836001600160a01b0316826001600160a01b03161415610b235750505050565b610b2e848385612f3b565b50505050565b610b3c612f9a565b8051825114610bb35760405162461bcd60e51b815260206004820152602660248201527f4b657973206c656e677468206e6f7420657175616c20746f2076616c7565732060448201527f6c656e677468000000000000000000000000000000000000000000000000000060648201526084016104f0565b60005b8251811015610c0357610bfb838281518110610bd457610bd46146f9565b6020026020010151838381518110610bee57610bee6146f9565b6020026020010151613003565b600101610bb6565b505050565b336000908152600660205260408120546001600160a01b031615610c945760405162461bcd60e51b815260206004820152602260248201527f55736572206164647265737320697320616c726561647920726567697374657260448201527f656400000000000000000000000000000000000000000000000000000000000060648201526084016104f0565b333b610d2e5760405162461bcd60e51b815260206004820152604960248201527f55736572206164647265737320697320616e20454f41202d204f6e6c7920736d60448201527f61727420636f6e7472616374206261736564206163636f756e7473206172652060648201527f737570706f727465640000000000000000000000000000000000000000000000608482015260a4016104f0565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f714df77c00000000000000000000000000000000000000000000000000000000600482015233906301ffc9a79060240160206040518083038186803b158015610d9d57600080fd5b505afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd591906146bf565b8015610e8357506040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f44c028fe00000000000000000000000000000000000000000000000000000000600482015233906301ffc9a79060240160206040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8391906146bf565b610f1b5760405162461bcd60e51b815260206004820152605a60248201527f557365722061646472657373206973206e6f7420616e20756e6976657273616c60448201527f2070726f66696c6520284552433732355820616e642f6f72204552433732355960648201527f20696e7465726661636573206e6f7420617661696c61626c6529000000000000608482015260a4016104f0565b600760008154610f2a90614757565b909155506040517f5be98904000000000000000000000000000000000000000000000000000000008152306004820152336024820152732279B7A0a67DB372996a5FaB50D91eAA73d2eBe690635be989049060440160206040518083038186803b158015610f9757600080fd5b505af4158015610fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcf91906146dc565b3360008181526006602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039590951694851790556007549151428152919392917fb626e6cc43dfdcd60d2e41d199e03d0c90c4c7bb5c76193c8d6c31b88217f96c910160405180910390a450336000908152600660205260409020546001600160a01b031690565b6000818152600360205260408120546001600160a01b031680610489576040517fae8f9a36000000000000000000000000000000000000000000000000000000008152600481018490526024016104f0565b60006110c8826130c1565b6110d28383613112565b9392505050565b60606110e4826130c1565b60008281526005602052604090206104899061315b565b6060815167ffffffffffffffff81111561111757611117613f54565b60405190808252806020026020018201604052801561114a57816020015b60608152602001906001900390816111355790505b50905060005b82518110156111a95761117b83828151811061116e5761116e6146f9565b6020026020010151613168565b82828151811061118d5761118d6146f9565b60200260200101819052506111a28160010190565b9050611150565b50919050565b336111ba8185613112565b611202576040517f1294d2a9000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b03821660248201526044016104f0565b61120f868686868661320a565b505050505050565b606061048982613168565b8351855114158061123557508251855114155b8061124257508051855114155b15611279576040517f93a8311900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b855181101561120f576112f686828151811061129a5761129a6146f9565b60200260200101518683815181106112b4576112b46146f9565b60200260200101518684815181106112ce576112ce6146f9565b6020026020010151868686815181106112e9576112e96146f9565b60200260200101516111af565b8061130081614757565b91505061127c565b336000818152600660205260408120549091906001600160a01b03166113705760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f8ef076aa00000000000000000000000000000000000000000000000000000000600482015283906001600160a01b038216906301ffc9a79060240160206040518083038186803b1580156113ea57600080fd5b505afa1580156113fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142291906146bf565b6114ba5760405162461bcd60e51b815260206004820152605860248201527f506f73742061646472657373206973206e6f7420706f696e74696e6720746f2060448201527f612076616c696420706f73742028536f6369616c4e6574776f726b506f73742060648201527f696e74657266616365206e6f7420617661696c61626c65290000000000000000608482015260a4016104f0565b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fd57600080fd5b505afa158015611511573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153591906146dc565b6001600160a01b0316146115d85760405162461bcd60e51b8152602060048201526044602482018190527f506f73742061646472657373206973206e6f74206f776e656420627920637572908201527f72656e7420536f6369616c4e6574776f726b20636f6e747261637420696e737460648201527f616e636500000000000000000000000000000000000000000000000000000000608482015260a4016104f0565b6040517fdc2dde3d00000000000000000000000000000000000000000000000000000000815260009073a513E6E4b8f2a923D98304ec87F64353C4D5C8539063dc2dde3d9061163790309033908e908e908e908e908e90600401614804565b60206040518083038186803b15801561164f57600080fd5b505af4158015611663573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168791906146dc565b60408051600060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b16602c8201529192506116f8913391015b6040516020818303038152906040526116e19061485b565b6000604051806020016040528060008152506133c0565b6040517fdb58ebdb0000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015286169063db58ebdb90602401600060405180830381600087803b15801561175457600080fd5b505af1158015611768573d6000803e3d6000fd5b505033600090815260066020526040908190205490517f3ff754420000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529091169250633ff754429150602401600060405180830381600087803b1580156117da57600080fd5b505af11580156117ee573d6000803e3d6000fd5b5050506001600160a01b03861690503360015b604080516001600160a01b03861681524260208201527f06f095ada26821e903889ee7afb234766ef8aa5eeac88a0a139f40fbdbfe4833910160405180910390a461184d818888613518565b98975050505050505050565b6001600160a01b038116600090815260046020526040812061048990613564565b611882612f9a565b61188c6000612e19565b565b336000818152600660205260409020546001600160a01b03166118f35760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6001600160a01b0380831660009081526006602052604090205483911661195c5760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b33836001600160a01b0381168214156119b75760405162461bcd60e51b815260206004820152601760248201527f5573657273206d75737420626520646966666572656e7400000000000000000060448201526064016104f0565b6001600160a01b03828116600090815260066020526040908190205490517f1042c45b0000000000000000000000000000000000000000000000000000000081528383166004820152911690631042c45b9060240160206040518083038186803b158015611a2457600080fd5b505afa158015611a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5c91906146bf565b15611aa95760405162461bcd60e51b815260206004820152601c60248201527f5573657220697320616c7265616479206120737562736372696265720000000060448201526064016104f0565b33600090815260066020526040908190205490517ff29362510000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529091169063f293625190602401600060405180830381600087803b158015611b1757600080fd5b505af1158015611b2b573d6000803e3d6000fd5b505050506001600160a01b03858116600090815260066020526040908190205490517f94555d1a0000000000000000000000000000000000000000000000000000000081523360048201529116906394555d1a90602401600060405180830381600087803b158015611b9c57600080fd5b505af1158015611bb0573d6000803e3d6000fd5b50506040514281526001600160a01b03881692503391507fb28fc0c0eb588dadcdf724fc3ef93e40bdc619874a448e441da14d52c3c3073f906020015b60405180910390a35050505050565b611c04612f9a565b611c0e8282613003565b5050565b6001600160a01b03811660009081526004602052604090206060906104899061356e565b336000818152600660205260408120549091906001600160a01b0316611c9e5760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6040517f49434d5e00000000000000000000000000000000000000000000000000000000815260009073a513E6E4b8f2a923D98304ec87F64353C4D5C853906349434d5e90611cfb90309033908c908c908c908c9060040161489d565b60206040518083038186803b158015611d1357600080fd5b505af4158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b91906146dc565b60408051600060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b16602c820152919250611d91913391016116c9565b33600090815260066020526040908190205490517f3ff754420000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015290911690633ff7544290602401600060405180830381600087803b158015611dff57600080fd5b505af1158015611e13573d6000803e3d6000fd5b5060009250339150829050604080516001600160a01b03861681524260208201527f06f095ada26821e903889ee7afb234766ef8aa5eeac88a0a139f40fbdbfe4833910160405180910390a4611e6a818686613518565b9695505050505050565b6000611e7f8261106b565b9050336001600160a01b0382168114611ede576040517f5b271ea20000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015260248201859052821660448201526064016104f0565b6001600160a01b038416611f1e576040517f9577b8b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836001600160a01b0316826001600160a01b03161415611f3e5750505050565b6000838152600560205260409020611f569085613579565b5082826001600160a01b0316856001600160a01b03167f34b797fc5a526f7bf1d2b5de25f6564fd85ae364e3ee939aee7c1ac27871a98860405160405180910390a450505050565b336000818152600660205260409020546001600160a01b03166120035760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f8ef076aa00000000000000000000000000000000000000000000000000000000600482015282906001600160a01b038216906301ffc9a79060240160206040518083038186803b15801561207d57600080fd5b505afa158015612091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b591906146bf565b61214d5760405162461bcd60e51b815260206004820152605860248201527f506f73742061646472657373206973206e6f7420706f696e74696e6720746f2060448201527f612076616c696420706f73742028536f6369616c4e6574776f726b506f73742060648201527f696e74657266616365206e6f7420617661696c61626c65290000000000000000608482015260a4016104f0565b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561219057600080fd5b505afa1580156121a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c891906146dc565b6001600160a01b03161461226b5760405162461bcd60e51b8152602060048201526044602482018190527f506f73742061646472657373206973206e6f74206f776e656420627920637572908201527f72656e7420536f6369616c4e6574776f726b20636f6e747261637420696e737460648201527f616e636500000000000000000000000000000000000000000000000000000000608482015260a4016104f0565b3383806001600160a01b031663a6c3e6b96040518163ffffffff1660e01b815260040160206040518083038186803b1580156122a657600080fd5b505afa1580156122ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122de91906146dc565b6001600160a01b0316826001600160a01b0316141561233f5760405162461bcd60e51b815260206004820181905260248201527f55736572206d757374206e6f742062652074686520706f737420617574686f7260448201526064016104f0565b6040517f6038b7f800000000000000000000000000000000000000000000000000000000815233600482018190529086906001600160a01b03821690636038b7f89060240160206040518083038186803b15801561239c57600080fd5b505afa1580156123b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d491906146bf565b6124205760405162461bcd60e51b815260206004820152601e60248201527f5573657220646964206e6f74206c696b652074686520706f737420796574000060448201526064016104f0565b6040517fd1d05dae0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0388169063d1d05dae90602401600060405180830381600087803b15801561247a57600080fd5b505af115801561248e573d6000803e3d6000fd5b505033600090815260066020526040908190205490517fd1d05dae0000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152909116925063d1d05dae9150602401600060405180830381600087803b15801561250057600080fd5b505af1158015612514573d6000803e3d6000fd5b50506040514281526001600160a01b038a1692503391507fcfe29e184ff93a5d905406b88c3ece544de591d1065ff4f7ee19d8ba7e0c863a90602001610a48565b336000818152600660205260409020546001600160a01b03166125ba5760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6001600160a01b038083166000908152600660205260409020548391166126235760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b33836001600160a01b03811682141561267e5760405162461bcd60e51b815260206004820152601760248201527f5573657273206d75737420626520646966666572656e7400000000000000000060448201526064016104f0565b6001600160a01b03828116600090815260066020526040908190205490517f1042c45b0000000000000000000000000000000000000000000000000000000081528383166004820152911690631042c45b9060240160206040518083038186803b1580156126eb57600080fd5b505afa1580156126ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272391906146bf565b61276f5760405162461bcd60e51b815260206004820152601c60248201527f55736572206973206e6f7420612073756273637269626572207965740000000060448201526064016104f0565b33600090815260066020526040908190205490517f5d2052a80000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015290911690635d2052a890602401600060405180830381600087803b1580156127dd57600080fd5b505af11580156127f1573d6000803e3d6000fd5b505050506001600160a01b03858116600090815260066020526040908190205490517f627c34ad00000000000000000000000000000000000000000000000000000000815233600482015291169063627c34ad90602401600060405180830381600087803b15801561286257600080fd5b505af1158015612876573d6000803e3d6000fd5b50506040514281526001600160a01b03881692503391507fc454fd8716f3d1a00fe1ccf95999df07044e76f6424799d86bf0b55c6331de8490602001611bed565b6128bf612f9a565b6001600160a01b03811661293b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104f0565b61294481612e19565b50565b336000818152600660205260408120549091906001600160a01b03166129af5760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f8ef076aa00000000000000000000000000000000000000000000000000000000600482015283906001600160a01b038216906301ffc9a79060240160206040518083038186803b158015612a2957600080fd5b505afa158015612a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6191906146bf565b612af95760405162461bcd60e51b815260206004820152605860248201527f506f73742061646472657373206973206e6f7420706f696e74696e6720746f2060448201527f612076616c696420706f73742028536f6369616c4e6574776f726b506f73742060648201527f696e74657266616365206e6f7420617661696c61626c65290000000000000000608482015260a4016104f0565b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3c57600080fd5b505afa158015612b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7491906146dc565b6001600160a01b031614612c175760405162461bcd60e51b8152602060048201526044602482018190527f506f73742061646472657373206973206e6f74206f776e656420627920637572908201527f72656e7420536f6369616c4e6574776f726b20636f6e747261637420696e737460648201527f616e636500000000000000000000000000000000000000000000000000000000608482015260a4016104f0565b6040517fc81bfe0e00000000000000000000000000000000000000000000000000000000815260009073a513E6E4b8f2a923D98304ec87F64353C4D5C8539063c81bfe0e90612c7690309033908e908e908e908e908e90600401614804565b60206040518083038186803b158015612c8e57600080fd5b505af4158015612ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc691906146dc565b60408051600060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b16602c820152919250612d0c913391016116c9565b6040517f703eb7240000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015286169063703eb72490602401600060405180830381600087803b158015612d6857600080fd5b505af1158015612d7c573d6000803e3d6000fd5b505033600090815260066020526040908190205490517f3ff754420000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529091169250633ff754429150602401600060405180830381600087803b158015612dee57600080fd5b505af1158015612e02573d6000803e3d6000fd5b5050506001600160a01b0386169050336002611801565b6000546001600160a01b0382811691161461294457600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008281526001602090815260409091208251612eb592840190613e1b565b5060405182907fcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b90600090a25050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4939914500000000000000000000000000000000000000000000000000000000148061048957506104898261358e565b6000818152600560205260409020612f539084613625565b5080826001600160a01b0316846001600160a01b03167f17d5389f6ab6adb2647dfa0aa365c323d37adacc30b33a65310b6158ce1373d560405160405180910390a4505050565b33612fad6000546001600160a01b031690565b6001600160a01b03161461188c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f0565b7fdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af182141561305d576040517f85c169bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db9327568214156130b7576040517f76755b3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c0e8282612e96565b6000818152600360205260409020546001600160a01b0316612944576040517fae8f9a36000000000000000000000000000000000000000000000000000000008152600481018290526024016104f0565b60008061311e8361106b565b9050806001600160a01b0316846001600160a01b0316148061315357506000838152600560205260409020613153908561363a565b949350505050565b606060006110d28361365c565b6000818152600160205260409020805460609190613185906148ea565b80601f01602080910402602001604051908101604052809291908181526020018280546131b1906148ea565b80156131fe5780601f106131d3576101008083540402835291602001916131fe565b820191906000526020600020905b8154815290600101906020018083116131e157829003601f168201915b50505050509050919050565b60006132158461106b565b9050856001600160a01b0316816001600160a01b03161461327c576040517f5b271ea20000000000000000000000000000000000000000000000000000000081526001600160a01b03808316600483015260248201869052871660448201526064016104f0565b6001600160a01b0385166132bc576040517f24ecef4d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336132c88787876136b7565b6132d28786613709565b6001600160a01b03871660009081526004602052604090206132f4908661375a565b506001600160a01b03861660009081526004602052604090206133179086613766565b506000858152600360205260409081902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0389811691821790925591518792918a16907fb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf906133969086908a908a90614938565b60405180910390a46133aa87878786613772565b6133b78787878787613887565b50505050505050565b6001600160a01b038416613400576040517f24ecef4d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600360205260409020546001600160a01b031615613452576040517f34c7b511000000000000000000000000000000000000000000000000000000008152600481018490526024016104f0565b3361345f600086866136b7565b6001600160a01b03851660009081526004602052604090206134819085613766565b5060008481526003602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03891690811790915590518692907fb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf906134fb90869089908990614938565b60405180910390a4613511600086868686613887565b5050505050565b8060005b81811015613511576135548585858481811061353a5761353a6146f9565b905060200201602081019061354f9190613f0b565b613a32565b61355d81614757565b905061351c565b6000610489825490565b60606104898261365c565b60006110d2836001600160a01b038416613b7e565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f714df77c00000000000000000000000000000000000000000000000000000000148061048957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610489565b60006110d2836001600160a01b038416613bcd565b6001600160a01b038116600090815260018301602052604081205415156110d2565b6060816000018054806020026020016040519081016040528092919081815260200182805480156131fe57602002820191906000526020600020905b8154815260200190600101908083116136985750505050509050919050565b6001600160a01b0383166136de576001600260008282546136d8919061496b565b90915550505b6001600160a01b038216610c03576001600260008282546136ff9190614983565b9091555050505050565b60008181526005602052604081209061372182613564565b905060005b8181101561351157600061373a8482613cc0565b9050613747818787612f3b565b508061375281614757565b915050613726565b60006110d28383613bcd565b60006110d28383613b7e565b61379c847f6bb56a1400000000000000000000000000000000000000000000000000000000613ccc565b15610b2e576000848484846040516020016137ba949392919061499a565b60408051601f19818403018152908290527f6bb56a1400000000000000000000000000000000000000000000000000000000825291506001600160a01b03861690636bb56a1490613831907f3724c94f0815e936299cca424da4140752198e0beb7931a6e0925d11bc97544c9085906004016149fa565b600060405180830381600087803b15801561384b57600080fd5b505af115801561385f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261120f9190810190614a13565b6138b1847f6bb56a1400000000000000000000000000000000000000000000000000000000613ccc565b156139a3576000858585846040516020016138cf949392919061499a565b60408051601f19818403018152908290527f6bb56a1400000000000000000000000000000000000000000000000000000000825291506001600160a01b03861690636bb56a1490613946907fc7a120a42b6057a0cbed111fbbfbd52fcd96748c04394f77fc2c3adbe0391e019085906004016149fa565b600060405180830381600087803b15801561396057600080fd5b505af1158015613974573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261399c9190810190614a13565b5050613511565b81613511576001600160a01b0384163b156139f5576040517f4349776d0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016104f0565b6040517f031731370000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016104f0565b6001600160a01b03808216600090815260066020526040902054829116613a9b5760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6001600160a01b03828116600090815260066020526040908190205490517fcacbcb70000000000000000000000000000000000000000000000000000000008152858316600482015291169063cacbcb7090602401600060405180830381600087803b158015613b0a57600080fd5b505af1158015613b1e573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b0316336001600160a01b03167fd120eb66fc1d1f51883f85ad2776ef64e71c8fc34bb794678ff88c497d00c6eb42604051613b7191815260200190565b60405180910390a4505050565b6000818152600183016020526040812054613bc557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610489565b506000610489565b60008181526001830160205260408120548015613cb6576000613bf1600183614983565b8554909150600090613c0590600190614983565b9050818114613c6a576000866000018281548110613c2557613c256146f9565b9060005260206000200154905080876000018481548110613c4857613c486146f9565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613c7b57613c7b614a81565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610489565b6000915050610489565b60006110d28383613df1565b604080517fffffffff00000000000000000000000000000000000000000000000000000000831660248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000179052905160009190829081906001600160a01b0387169061753090613d79908690614ab0565b6000604051808303818686fa925050503d8060008114613db5576040519150601f19603f3d011682016040523d82523d6000602084013e613dba565b606091505b5091509150602081511015613dd55760009350505050610489565b818015611e6a575080806020019051810190611e6a91906146bf565b6000826000018281548110613e0857613e086146f9565b9060005260206000200154905092915050565b828054613e27906148ea565b90600052602060002090601f016020900481019282613e495760008555613e8f565b82601f10613e6257805160ff1916838001178555613e8f565b82800160010185558215613e8f579182015b82811115613e8f578251825591602001919060010190613e74565b50613e9b929150613e9f565b5090565b5b80821115613e9b5760008155600101613ea0565b600060208284031215613ec657600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146110d257600080fd5b6001600160a01b038116811461294457600080fd5b600060208284031215613f1d57600080fd5b81356110d281613ef6565b60008060408385031215613f3b57600080fd5b8235613f4681613ef6565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613fac57613fac613f54565b604052919050565b600067ffffffffffffffff821115613fce57613fce613f54565b5060051b60200190565b600082601f830112613fe957600080fd5b81356020613ffe613ff983613fb4565b613f83565b82815260059290921b8401810191818101908684111561401d57600080fd5b8286015b848110156140385780358352918301918301614021565b509695505050505050565b600067ffffffffffffffff82111561405d5761405d613f54565b50601f01601f191660200190565b600082601f83011261407c57600080fd5b813561408a613ff982614043565b81815284602083860101111561409f57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126140cd57600080fd5b813560206140dd613ff983613fb4565b82815260059290921b840181019181810190868411156140fc57600080fd5b8286015b8481101561403857803567ffffffffffffffff8111156141205760008081fd5b61412e8986838b010161406b565b845250918301918301614100565b6000806040838503121561414f57600080fd5b823567ffffffffffffffff8082111561416757600080fd5b61417386838701613fd8565b9350602085013591508082111561418957600080fd5b50614196858286016140bc565b9150509250929050565b6000602082840312156141b257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156141fa5783516001600160a01b0316835292840192918401916001016141d5565b50909695505050505050565b60006020828403121561421857600080fd5b813567ffffffffffffffff81111561422f57600080fd5b61315384828501613fd8565b60005b8381101561425657818101518382015260200161423e565b83811115610b2e5750506000910152565b6000815180845261427f81602086016020860161423b565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614306577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526142f4858351614267565b945092850192908501906001016142ba565b5092979650505050505050565b801515811461294457600080fd5b600080600080600060a0868803121561433957600080fd5b853561434481613ef6565b9450602086013561435481613ef6565b935060408601359250606086013561436b81614313565b9150608086013567ffffffffffffffff81111561438757600080fd5b6143938882890161406b565b9150509295509295909350565b6020815260006110d26020830184614267565b600082601f8301126143c457600080fd5b813560206143d4613ff983613fb4565b82815260059290921b840181019181810190868411156143f357600080fd5b8286015b8481101561403857803561440a81613ef6565b83529183019183016143f7565b600080600080600060a0868803121561442f57600080fd5b853567ffffffffffffffff8082111561444757600080fd5b61445389838a016143b3565b9650602088013591508082111561446957600080fd5b61447589838a016143b3565b9550604088013591508082111561448b57600080fd5b61449789838a01613fd8565b9450606088013591506144a982614313565b909250608087013590808211156144bf57600080fd5b50614393888289016140bc565b60008083601f8401126144de57600080fd5b50813567ffffffffffffffff8111156144f657600080fd5b60208301915083602082850101111561450e57600080fd5b9250929050565b60008083601f84011261452757600080fd5b50813567ffffffffffffffff81111561453f57600080fd5b6020830191508360208260051b850101111561450e57600080fd5b60008060008060006060868803121561457257600080fd5b853567ffffffffffffffff8082111561458a57600080fd5b61459689838a016144cc565b909750955060208801359150808211156145af57600080fd5b506145bc88828901614515565b90945092505060408601356145d081613ef6565b809150509295509295909350565b600080604083850312156145f157600080fd5b82359150602083013567ffffffffffffffff81111561460f57600080fd5b6141968582860161406b565b6020808252825182820181905260009190848201906040850190845b818110156141fa57835183529284019291840191600101614637565b6000806000806040858703121561466957600080fd5b843567ffffffffffffffff8082111561468157600080fd5b61468d888389016144cc565b909650945060208701359150808211156146a657600080fd5b506146b387828801614515565b95989497509550505050565b6000602082840312156146d157600080fd5b81516110d281614313565b6000602082840312156146ee57600080fd5b81516110d281613ef6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561478957614789614728565b5060010190565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b8183526000602080850194508260005b858110156147f95781356147de81613ef6565b6001600160a01b0316875295820195908201906001016147cb565b509495945050505050565b60006001600160a01b03808a168352808916602084015260a0604084015261483060a08401888a614790565b83810360608501526148438187896147bb565b92505080841660808401525098975050505050505050565b805160208083015191908110156111a9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910360031b1b16919050565b60006001600160a01b038089168352808816602084015250608060408301526148ca608083018688614790565b82810360608401526148dd8185876147bb565b9998505050505050505050565b600181811c908216806148fe57607f821691505b602082108114156111a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6001600160a01b038416815282151560208201526060604082015260006149626060830184614267565b95945050505050565b6000821982111561497e5761497e614728565b500190565b60008282101561499557614995614728565b500390565b60007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808760601b168352808660601b1660148401525083602883015282516149ea81604885016020870161423b565b9190910160480195945050505050565b8281526040602082015260006131536040830184614267565b600060208284031215614a2557600080fd5b815167ffffffffffffffff811115614a3c57600080fd5b8201601f81018413614a4d57600080fd5b8051614a5b613ff982614043565b818152856020838501011115614a7057600080fd5b61496282602083016020860161423b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008251614ac281846020870161423b565b919091019291505056fea2646970667358221220bcdc840bcb5efbff7bd2e7f3d61a54164ff1f3ef9d75bb569195eb5307eb0a5664736f6c63430008090033deba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af12f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806365c12877116100f9578063b2fd625c11610097578063e7c4ece511610071578063e7c4ece5146103e7578063f0e7a43c146103fa578063f2fde38b1461040d578063fc7200311461042057600080fd5b8063b2fd625c146103b8578063cb3d0564146103cb578063cf5182ba146103d457600080fd5b80637659c8c9116100d35780637659c8c9146103615780637f23690c146103745780638da5cb5b14610387578063a3b261f21461039857600080fd5b806365c128771461033357806370a0823114610346578063715018a61461035957600080fd5b8063217b2270116101665780634e3e6e9c116101405780634e3e6e9c146102cd578063511b6952146102ed57806354f6127f14610300578063559088681461032057600080fd5b8063217b2270146102875780632a3654a41461029a57806349a6078d146102ad57600080fd5b80630e50cee5116101a25780630e50cee51461021957806314a6e2931461025a57806318160ddd1461026d5780631aa3a0081461027f57600080fd5b806301ffc9a7146101c957806302397a82146101f15780630b0c6d8214610206575b600080fd5b6101dc6101d7366004613eb4565b610433565b60405190151581526020015b60405180910390f35b6102046101ff366004613f0b565b61048f565b005b610204610214366004613f28565b610a59565b610242610227366004613f0b565b6006602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b61020461026836600461413c565b610b34565b6002545b6040519081526020016101e8565b610242610c08565b6102426102953660046141a0565b61106b565b6101dc6102a8366004613f28565b6110bd565b6102c06102bb3660046141a0565b6110d9565b6040516101e891906141b9565b6102e06102db366004614206565b6110fb565b6040516101e89190614293565b6102046102fb366004614321565b6111af565b61031361030e3660046141a0565b611217565b6040516101e891906143a0565b61020461032e366004614417565b611222565b61024261034136600461455a565b611308565b610271610354366004613f0b565b611859565b61020461187a565b61020461036f366004613f0b565b61188e565b6102046103823660046145de565b611bfc565b6000546001600160a01b0316610242565b6103ab6103a6366004613f0b565b611c12565b6040516101e8919061461b565b6102426103c6366004614653565b611c36565b61027160075481565b6102046103e2366004613f28565b611e74565b6102046103f5366004613f0b565b611f9e565b610204610408366004613f0b565b612555565b61020461041b366004613f0b565b6128b7565b61024261042e36600461455a565b612947565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f52ae1080000000000000000000000000000000000000000000000000000000001480610489575061048982612ee5565b92915050565b336000818152600660205260409020546001600160a01b03166104f95760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064015b60405180910390fd5b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f8ef076aa00000000000000000000000000000000000000000000000000000000600482015282906001600160a01b038216906301ffc9a79060240160206040518083038186803b15801561057357600080fd5b505afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab91906146bf565b6106435760405162461bcd60e51b815260206004820152605860248201527f506f73742061646472657373206973206e6f7420706f696e74696e6720746f2060448201527f612076616c696420706f73742028536f6369616c4e6574776f726b506f73742060648201527f696e74657266616365206e6f7420617661696c61626c65290000000000000000608482015260a4016104f0565b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561068657600080fd5b505afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be91906146dc565b6001600160a01b0316146107615760405162461bcd60e51b8152602060048201526044602482018190527f506f73742061646472657373206973206e6f74206f776e656420627920637572908201527f72656e7420536f6369616c4e6574776f726b20636f6e747261637420696e737460648201527f616e636500000000000000000000000000000000000000000000000000000000608482015260a4016104f0565b3383806001600160a01b031663a6c3e6b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d491906146dc565b6001600160a01b0316826001600160a01b031614156108355760405162461bcd60e51b815260206004820181905260248201527f55736572206d757374206e6f742062652074686520706f737420617574686f7260448201526064016104f0565b6040517f6038b7f800000000000000000000000000000000000000000000000000000000815233600482018190529086906001600160a01b03821690636038b7f89060240160206040518083038186803b15801561089257600080fd5b505afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca91906146bf565b156109175760405162461bcd60e51b815260206004820152601f60248201527f557365722068617320616c7265616479206c696b65642074686520706f73740060448201526064016104f0565b6040517f888b9afe0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0388169063888b9afe90602401600060405180830381600087803b15801561097157600080fd5b505af1158015610985573d6000803e3d6000fd5b505033600090815260066020526040908190205490517f888b9afe0000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152909116925063888b9afe9150602401600060405180830381600087803b1580156109f757600080fd5b505af1158015610a0b573d6000803e3d6000fd5b50506040514281526001600160a01b038a1692503391507f876663551057bbf491fadeab49176312ba3c80adb2edaaabbe66a39b8b41e986906020015b60405180910390a350505050505050565b6000610a648261106b565b9050336001600160a01b0382168114610ac3576040517f5b271ea20000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015260248201859052821660448201526064016104f0565b6001600160a01b038416610b03576040517f9577b8b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836001600160a01b0316826001600160a01b03161415610b235750505050565b610b2e848385612f3b565b50505050565b610b3c612f9a565b8051825114610bb35760405162461bcd60e51b815260206004820152602660248201527f4b657973206c656e677468206e6f7420657175616c20746f2076616c7565732060448201527f6c656e677468000000000000000000000000000000000000000000000000000060648201526084016104f0565b60005b8251811015610c0357610bfb838281518110610bd457610bd46146f9565b6020026020010151838381518110610bee57610bee6146f9565b6020026020010151613003565b600101610bb6565b505050565b336000908152600660205260408120546001600160a01b031615610c945760405162461bcd60e51b815260206004820152602260248201527f55736572206164647265737320697320616c726561647920726567697374657260448201527f656400000000000000000000000000000000000000000000000000000000000060648201526084016104f0565b333b610d2e5760405162461bcd60e51b815260206004820152604960248201527f55736572206164647265737320697320616e20454f41202d204f6e6c7920736d60448201527f61727420636f6e7472616374206261736564206163636f756e7473206172652060648201527f737570706f727465640000000000000000000000000000000000000000000000608482015260a4016104f0565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f714df77c00000000000000000000000000000000000000000000000000000000600482015233906301ffc9a79060240160206040518083038186803b158015610d9d57600080fd5b505afa158015610db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd591906146bf565b8015610e8357506040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f44c028fe00000000000000000000000000000000000000000000000000000000600482015233906301ffc9a79060240160206040518083038186803b158015610e4b57600080fd5b505afa158015610e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8391906146bf565b610f1b5760405162461bcd60e51b815260206004820152605a60248201527f557365722061646472657373206973206e6f7420616e20756e6976657273616c60448201527f2070726f66696c6520284552433732355820616e642f6f72204552433732355960648201527f20696e7465726661636573206e6f7420617661696c61626c6529000000000000608482015260a4016104f0565b600760008154610f2a90614757565b909155506040517f5be9890400000000000000000000000000000000000000000000000000000000815230600482015233602482015273__$e1e9acb8cf0b7d9dd541aed3de0dc7916c$__90635be989049060440160206040518083038186803b158015610f9757600080fd5b505af4158015610fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcf91906146dc565b3360008181526006602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039590951694851790556007549151428152919392917fb626e6cc43dfdcd60d2e41d199e03d0c90c4c7bb5c76193c8d6c31b88217f96c910160405180910390a450336000908152600660205260409020546001600160a01b031690565b6000818152600360205260408120546001600160a01b031680610489576040517fae8f9a36000000000000000000000000000000000000000000000000000000008152600481018490526024016104f0565b60006110c8826130c1565b6110d28383613112565b9392505050565b60606110e4826130c1565b60008281526005602052604090206104899061315b565b6060815167ffffffffffffffff81111561111757611117613f54565b60405190808252806020026020018201604052801561114a57816020015b60608152602001906001900390816111355790505b50905060005b82518110156111a95761117b83828151811061116e5761116e6146f9565b6020026020010151613168565b82828151811061118d5761118d6146f9565b60200260200101819052506111a28160010190565b9050611150565b50919050565b336111ba8185613112565b611202576040517f1294d2a9000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b03821660248201526044016104f0565b61120f868686868661320a565b505050505050565b606061048982613168565b8351855114158061123557508251855114155b8061124257508051855114155b15611279576040517f93a8311900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b855181101561120f576112f686828151811061129a5761129a6146f9565b60200260200101518683815181106112b4576112b46146f9565b60200260200101518684815181106112ce576112ce6146f9565b6020026020010151868686815181106112e9576112e96146f9565b60200260200101516111af565b8061130081614757565b91505061127c565b336000818152600660205260408120549091906001600160a01b03166113705760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f8ef076aa00000000000000000000000000000000000000000000000000000000600482015283906001600160a01b038216906301ffc9a79060240160206040518083038186803b1580156113ea57600080fd5b505afa1580156113fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142291906146bf565b6114ba5760405162461bcd60e51b815260206004820152605860248201527f506f73742061646472657373206973206e6f7420706f696e74696e6720746f2060448201527f612076616c696420706f73742028536f6369616c4e6574776f726b506f73742060648201527f696e74657266616365206e6f7420617661696c61626c65290000000000000000608482015260a4016104f0565b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114fd57600080fd5b505afa158015611511573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153591906146dc565b6001600160a01b0316146115d85760405162461bcd60e51b8152602060048201526044602482018190527f506f73742061646472657373206973206e6f74206f776e656420627920637572908201527f72656e7420536f6369616c4e6574776f726b20636f6e747261637420696e737460648201527f616e636500000000000000000000000000000000000000000000000000000000608482015260a4016104f0565b6040517fdc2dde3d00000000000000000000000000000000000000000000000000000000815260009073__$166ae69d81e0c2a85c28a3b44767a780af$__9063dc2dde3d9061163790309033908e908e908e908e908e90600401614804565b60206040518083038186803b15801561164f57600080fd5b505af4158015611663573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168791906146dc565b60408051600060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b16602c8201529192506116f8913391015b6040516020818303038152906040526116e19061485b565b6000604051806020016040528060008152506133c0565b6040517fdb58ebdb0000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015286169063db58ebdb90602401600060405180830381600087803b15801561175457600080fd5b505af1158015611768573d6000803e3d6000fd5b505033600090815260066020526040908190205490517f3ff754420000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529091169250633ff754429150602401600060405180830381600087803b1580156117da57600080fd5b505af11580156117ee573d6000803e3d6000fd5b5050506001600160a01b03861690503360015b604080516001600160a01b03861681524260208201527f06f095ada26821e903889ee7afb234766ef8aa5eeac88a0a139f40fbdbfe4833910160405180910390a461184d818888613518565b98975050505050505050565b6001600160a01b038116600090815260046020526040812061048990613564565b611882612f9a565b61188c6000612e19565b565b336000818152600660205260409020546001600160a01b03166118f35760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6001600160a01b0380831660009081526006602052604090205483911661195c5760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b33836001600160a01b0381168214156119b75760405162461bcd60e51b815260206004820152601760248201527f5573657273206d75737420626520646966666572656e7400000000000000000060448201526064016104f0565b6001600160a01b03828116600090815260066020526040908190205490517f1042c45b0000000000000000000000000000000000000000000000000000000081528383166004820152911690631042c45b9060240160206040518083038186803b158015611a2457600080fd5b505afa158015611a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5c91906146bf565b15611aa95760405162461bcd60e51b815260206004820152601c60248201527f5573657220697320616c7265616479206120737562736372696265720000000060448201526064016104f0565b33600090815260066020526040908190205490517ff29362510000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529091169063f293625190602401600060405180830381600087803b158015611b1757600080fd5b505af1158015611b2b573d6000803e3d6000fd5b505050506001600160a01b03858116600090815260066020526040908190205490517f94555d1a0000000000000000000000000000000000000000000000000000000081523360048201529116906394555d1a90602401600060405180830381600087803b158015611b9c57600080fd5b505af1158015611bb0573d6000803e3d6000fd5b50506040514281526001600160a01b03881692503391507fb28fc0c0eb588dadcdf724fc3ef93e40bdc619874a448e441da14d52c3c3073f906020015b60405180910390a35050505050565b611c04612f9a565b611c0e8282613003565b5050565b6001600160a01b03811660009081526004602052604090206060906104899061356e565b336000818152600660205260408120549091906001600160a01b0316611c9e5760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6040517f49434d5e00000000000000000000000000000000000000000000000000000000815260009073__$166ae69d81e0c2a85c28a3b44767a780af$__906349434d5e90611cfb90309033908c908c908c908c9060040161489d565b60206040518083038186803b158015611d1357600080fd5b505af4158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b91906146dc565b60408051600060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b16602c820152919250611d91913391016116c9565b33600090815260066020526040908190205490517f3ff754420000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015290911690633ff7544290602401600060405180830381600087803b158015611dff57600080fd5b505af1158015611e13573d6000803e3d6000fd5b5060009250339150829050604080516001600160a01b03861681524260208201527f06f095ada26821e903889ee7afb234766ef8aa5eeac88a0a139f40fbdbfe4833910160405180910390a4611e6a818686613518565b9695505050505050565b6000611e7f8261106b565b9050336001600160a01b0382168114611ede576040517f5b271ea20000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015260248201859052821660448201526064016104f0565b6001600160a01b038416611f1e576040517f9577b8b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836001600160a01b0316826001600160a01b03161415611f3e5750505050565b6000838152600560205260409020611f569085613579565b5082826001600160a01b0316856001600160a01b03167f34b797fc5a526f7bf1d2b5de25f6564fd85ae364e3ee939aee7c1ac27871a98860405160405180910390a450505050565b336000818152600660205260409020546001600160a01b03166120035760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f8ef076aa00000000000000000000000000000000000000000000000000000000600482015282906001600160a01b038216906301ffc9a79060240160206040518083038186803b15801561207d57600080fd5b505afa158015612091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b591906146bf565b61214d5760405162461bcd60e51b815260206004820152605860248201527f506f73742061646472657373206973206e6f7420706f696e74696e6720746f2060448201527f612076616c696420706f73742028536f6369616c4e6574776f726b506f73742060648201527f696e74657266616365206e6f7420617661696c61626c65290000000000000000608482015260a4016104f0565b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561219057600080fd5b505afa1580156121a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c891906146dc565b6001600160a01b03161461226b5760405162461bcd60e51b8152602060048201526044602482018190527f506f73742061646472657373206973206e6f74206f776e656420627920637572908201527f72656e7420536f6369616c4e6574776f726b20636f6e747261637420696e737460648201527f616e636500000000000000000000000000000000000000000000000000000000608482015260a4016104f0565b3383806001600160a01b031663a6c3e6b96040518163ffffffff1660e01b815260040160206040518083038186803b1580156122a657600080fd5b505afa1580156122ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122de91906146dc565b6001600160a01b0316826001600160a01b0316141561233f5760405162461bcd60e51b815260206004820181905260248201527f55736572206d757374206e6f742062652074686520706f737420617574686f7260448201526064016104f0565b6040517f6038b7f800000000000000000000000000000000000000000000000000000000815233600482018190529086906001600160a01b03821690636038b7f89060240160206040518083038186803b15801561239c57600080fd5b505afa1580156123b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d491906146bf565b6124205760405162461bcd60e51b815260206004820152601e60248201527f5573657220646964206e6f74206c696b652074686520706f737420796574000060448201526064016104f0565b6040517fd1d05dae0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0388169063d1d05dae90602401600060405180830381600087803b15801561247a57600080fd5b505af115801561248e573d6000803e3d6000fd5b505033600090815260066020526040908190205490517fd1d05dae0000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152909116925063d1d05dae9150602401600060405180830381600087803b15801561250057600080fd5b505af1158015612514573d6000803e3d6000fd5b50506040514281526001600160a01b038a1692503391507fcfe29e184ff93a5d905406b88c3ece544de591d1065ff4f7ee19d8ba7e0c863a90602001610a48565b336000818152600660205260409020546001600160a01b03166125ba5760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6001600160a01b038083166000908152600660205260409020548391166126235760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b33836001600160a01b03811682141561267e5760405162461bcd60e51b815260206004820152601760248201527f5573657273206d75737420626520646966666572656e7400000000000000000060448201526064016104f0565b6001600160a01b03828116600090815260066020526040908190205490517f1042c45b0000000000000000000000000000000000000000000000000000000081528383166004820152911690631042c45b9060240160206040518083038186803b1580156126eb57600080fd5b505afa1580156126ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272391906146bf565b61276f5760405162461bcd60e51b815260206004820152601c60248201527f55736572206973206e6f7420612073756273637269626572207965740000000060448201526064016104f0565b33600090815260066020526040908190205490517f5d2052a80000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015290911690635d2052a890602401600060405180830381600087803b1580156127dd57600080fd5b505af11580156127f1573d6000803e3d6000fd5b505050506001600160a01b03858116600090815260066020526040908190205490517f627c34ad00000000000000000000000000000000000000000000000000000000815233600482015291169063627c34ad90602401600060405180830381600087803b15801561286257600080fd5b505af1158015612876573d6000803e3d6000fd5b50506040514281526001600160a01b03881692503391507fc454fd8716f3d1a00fe1ccf95999df07044e76f6424799d86bf0b55c6331de8490602001611bed565b6128bf612f9a565b6001600160a01b03811661293b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104f0565b61294481612e19565b50565b336000818152600660205260408120549091906001600160a01b03166129af5760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f8ef076aa00000000000000000000000000000000000000000000000000000000600482015283906001600160a01b038216906301ffc9a79060240160206040518083038186803b158015612a2957600080fd5b505afa158015612a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6191906146bf565b612af95760405162461bcd60e51b815260206004820152605860248201527f506f73742061646472657373206973206e6f7420706f696e74696e6720746f2060448201527f612076616c696420706f73742028536f6369616c4e6574776f726b506f73742060648201527f696e74657266616365206e6f7420617661696c61626c65290000000000000000608482015260a4016104f0565b306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3c57600080fd5b505afa158015612b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7491906146dc565b6001600160a01b031614612c175760405162461bcd60e51b8152602060048201526044602482018190527f506f73742061646472657373206973206e6f74206f776e656420627920637572908201527f72656e7420536f6369616c4e6574776f726b20636f6e747261637420696e737460648201527f616e636500000000000000000000000000000000000000000000000000000000608482015260a4016104f0565b6040517fc81bfe0e00000000000000000000000000000000000000000000000000000000815260009073__$166ae69d81e0c2a85c28a3b44767a780af$__9063c81bfe0e90612c7690309033908e908e908e908e908e90600401614804565b60206040518083038186803b158015612c8e57600080fd5b505af4158015612ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cc691906146dc565b60408051600060208201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b16602c820152919250612d0c913391016116c9565b6040517f703eb7240000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015286169063703eb72490602401600060405180830381600087803b158015612d6857600080fd5b505af1158015612d7c573d6000803e3d6000fd5b505033600090815260066020526040908190205490517f3ff754420000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529091169250633ff754429150602401600060405180830381600087803b158015612dee57600080fd5b505af1158015612e02573d6000803e3d6000fd5b5050506001600160a01b0386169050336002611801565b6000546001600160a01b0382811691161461294457600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008281526001602090815260409091208251612eb592840190613e1b565b5060405182907fcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b90600090a25050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f4939914500000000000000000000000000000000000000000000000000000000148061048957506104898261358e565b6000818152600560205260409020612f539084613625565b5080826001600160a01b0316846001600160a01b03167f17d5389f6ab6adb2647dfa0aa365c323d37adacc30b33a65310b6158ce1373d560405160405180910390a4505050565b33612fad6000546001600160a01b031690565b6001600160a01b03161461188c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104f0565b7fdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af182141561305d576040517f85c169bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db9327568214156130b7576040517f76755b3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c0e8282612e96565b6000818152600360205260409020546001600160a01b0316612944576040517fae8f9a36000000000000000000000000000000000000000000000000000000008152600481018290526024016104f0565b60008061311e8361106b565b9050806001600160a01b0316846001600160a01b0316148061315357506000838152600560205260409020613153908561363a565b949350505050565b606060006110d28361365c565b6000818152600160205260409020805460609190613185906148ea565b80601f01602080910402602001604051908101604052809291908181526020018280546131b1906148ea565b80156131fe5780601f106131d3576101008083540402835291602001916131fe565b820191906000526020600020905b8154815290600101906020018083116131e157829003601f168201915b50505050509050919050565b60006132158461106b565b9050856001600160a01b0316816001600160a01b03161461327c576040517f5b271ea20000000000000000000000000000000000000000000000000000000081526001600160a01b03808316600483015260248201869052871660448201526064016104f0565b6001600160a01b0385166132bc576040517f24ecef4d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336132c88787876136b7565b6132d28786613709565b6001600160a01b03871660009081526004602052604090206132f4908661375a565b506001600160a01b03861660009081526004602052604090206133179086613766565b506000858152600360205260409081902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0389811691821790925591518792918a16907fb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf906133969086908a908a90614938565b60405180910390a46133aa87878786613772565b6133b78787878787613887565b50505050505050565b6001600160a01b038416613400576040517f24ecef4d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600360205260409020546001600160a01b031615613452576040517f34c7b511000000000000000000000000000000000000000000000000000000008152600481018490526024016104f0565b3361345f600086866136b7565b6001600160a01b03851660009081526004602052604090206134819085613766565b5060008481526003602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03891690811790915590518692907fb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bf906134fb90869089908990614938565b60405180910390a4613511600086868686613887565b5050505050565b8060005b81811015613511576135548585858481811061353a5761353a6146f9565b905060200201602081019061354f9190613f0b565b613a32565b61355d81614757565b905061351c565b6000610489825490565b60606104898261365c565b60006110d2836001600160a01b038416613b7e565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f714df77c00000000000000000000000000000000000000000000000000000000148061048957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610489565b60006110d2836001600160a01b038416613bcd565b6001600160a01b038116600090815260018301602052604081205415156110d2565b6060816000018054806020026020016040519081016040528092919081815260200182805480156131fe57602002820191906000526020600020905b8154815260200190600101908083116136985750505050509050919050565b6001600160a01b0383166136de576001600260008282546136d8919061496b565b90915550505b6001600160a01b038216610c03576001600260008282546136ff9190614983565b9091555050505050565b60008181526005602052604081209061372182613564565b905060005b8181101561351157600061373a8482613cc0565b9050613747818787612f3b565b508061375281614757565b915050613726565b60006110d28383613bcd565b60006110d28383613b7e565b61379c847f6bb56a1400000000000000000000000000000000000000000000000000000000613ccc565b15610b2e576000848484846040516020016137ba949392919061499a565b60408051601f19818403018152908290527f6bb56a1400000000000000000000000000000000000000000000000000000000825291506001600160a01b03861690636bb56a1490613831907f3724c94f0815e936299cca424da4140752198e0beb7931a6e0925d11bc97544c9085906004016149fa565b600060405180830381600087803b15801561384b57600080fd5b505af115801561385f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261120f9190810190614a13565b6138b1847f6bb56a1400000000000000000000000000000000000000000000000000000000613ccc565b156139a3576000858585846040516020016138cf949392919061499a565b60408051601f19818403018152908290527f6bb56a1400000000000000000000000000000000000000000000000000000000825291506001600160a01b03861690636bb56a1490613946907fc7a120a42b6057a0cbed111fbbfbd52fcd96748c04394f77fc2c3adbe0391e019085906004016149fa565b600060405180830381600087803b15801561396057600080fd5b505af1158015613974573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261399c9190810190614a13565b5050613511565b81613511576001600160a01b0384163b156139f5576040517f4349776d0000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016104f0565b6040517f031731370000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016104f0565b6001600160a01b03808216600090815260066020526040902054829116613a9b5760405162461bcd60e51b815260206004820152601e60248201527f557365722061646472657373206973206e6f742072656769737465726564000060448201526064016104f0565b6001600160a01b03828116600090815260066020526040908190205490517fcacbcb70000000000000000000000000000000000000000000000000000000008152858316600482015291169063cacbcb7090602401600060405180830381600087803b158015613b0a57600080fd5b505af1158015613b1e573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b0316336001600160a01b03167fd120eb66fc1d1f51883f85ad2776ef64e71c8fc34bb794678ff88c497d00c6eb42604051613b7191815260200190565b60405180910390a4505050565b6000818152600183016020526040812054613bc557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610489565b506000610489565b60008181526001830160205260408120548015613cb6576000613bf1600183614983565b8554909150600090613c0590600190614983565b9050818114613c6a576000866000018281548110613c2557613c256146f9565b9060005260206000200154905080876000018481548110613c4857613c486146f9565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613c7b57613c7b614a81565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610489565b6000915050610489565b60006110d28383613df1565b604080517fffffffff00000000000000000000000000000000000000000000000000000000831660248083019190915282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a700000000000000000000000000000000000000000000000000000000179052905160009190829081906001600160a01b0387169061753090613d79908690614ab0565b6000604051808303818686fa925050503d8060008114613db5576040519150601f19603f3d011682016040523d82523d6000602084013e613dba565b606091505b5091509150602081511015613dd55760009350505050610489565b818015611e6a575080806020019051810190611e6a91906146bf565b6000826000018281548110613e0857613e086146f9565b9060005260206000200154905092915050565b828054613e27906148ea565b90600052602060002090601f016020900481019282613e495760008555613e8f565b82601f10613e6257805160ff1916838001178555613e8f565b82800160010185558215613e8f579182015b82811115613e8f578251825591602001919060010190613e74565b50613e9b929150613e9f565b5090565b5b80821115613e9b5760008155600101613ea0565b600060208284031215613ec657600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146110d257600080fd5b6001600160a01b038116811461294457600080fd5b600060208284031215613f1d57600080fd5b81356110d281613ef6565b60008060408385031215613f3b57600080fd5b8235613f4681613ef6565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613fac57613fac613f54565b604052919050565b600067ffffffffffffffff821115613fce57613fce613f54565b5060051b60200190565b600082601f830112613fe957600080fd5b81356020613ffe613ff983613fb4565b613f83565b82815260059290921b8401810191818101908684111561401d57600080fd5b8286015b848110156140385780358352918301918301614021565b509695505050505050565b600067ffffffffffffffff82111561405d5761405d613f54565b50601f01601f191660200190565b600082601f83011261407c57600080fd5b813561408a613ff982614043565b81815284602083860101111561409f57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126140cd57600080fd5b813560206140dd613ff983613fb4565b82815260059290921b840181019181810190868411156140fc57600080fd5b8286015b8481101561403857803567ffffffffffffffff8111156141205760008081fd5b61412e8986838b010161406b565b845250918301918301614100565b6000806040838503121561414f57600080fd5b823567ffffffffffffffff8082111561416757600080fd5b61417386838701613fd8565b9350602085013591508082111561418957600080fd5b50614196858286016140bc565b9150509250929050565b6000602082840312156141b257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156141fa5783516001600160a01b0316835292840192918401916001016141d5565b50909695505050505050565b60006020828403121561421857600080fd5b813567ffffffffffffffff81111561422f57600080fd5b61315384828501613fd8565b60005b8381101561425657818101518382015260200161423e565b83811115610b2e5750506000910152565b6000815180845261427f81602086016020860161423b565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614306577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526142f4858351614267565b945092850192908501906001016142ba565b5092979650505050505050565b801515811461294457600080fd5b600080600080600060a0868803121561433957600080fd5b853561434481613ef6565b9450602086013561435481613ef6565b935060408601359250606086013561436b81614313565b9150608086013567ffffffffffffffff81111561438757600080fd5b6143938882890161406b565b9150509295509295909350565b6020815260006110d26020830184614267565b600082601f8301126143c457600080fd5b813560206143d4613ff983613fb4565b82815260059290921b840181019181810190868411156143f357600080fd5b8286015b8481101561403857803561440a81613ef6565b83529183019183016143f7565b600080600080600060a0868803121561442f57600080fd5b853567ffffffffffffffff8082111561444757600080fd5b61445389838a016143b3565b9650602088013591508082111561446957600080fd5b61447589838a016143b3565b9550604088013591508082111561448b57600080fd5b61449789838a01613fd8565b9450606088013591506144a982614313565b909250608087013590808211156144bf57600080fd5b50614393888289016140bc565b60008083601f8401126144de57600080fd5b50813567ffffffffffffffff8111156144f657600080fd5b60208301915083602082850101111561450e57600080fd5b9250929050565b60008083601f84011261452757600080fd5b50813567ffffffffffffffff81111561453f57600080fd5b6020830191508360208260051b850101111561450e57600080fd5b60008060008060006060868803121561457257600080fd5b853567ffffffffffffffff8082111561458a57600080fd5b61459689838a016144cc565b909750955060208801359150808211156145af57600080fd5b506145bc88828901614515565b90945092505060408601356145d081613ef6565b809150509295509295909350565b600080604083850312156145f157600080fd5b82359150602083013567ffffffffffffffff81111561460f57600080fd5b6141968582860161406b565b6020808252825182820181905260009190848201906040850190845b818110156141fa57835183529284019291840191600101614637565b6000806000806040858703121561466957600080fd5b843567ffffffffffffffff8082111561468157600080fd5b61468d888389016144cc565b909650945060208701359150808211156146a657600080fd5b506146b387828801614515565b95989497509550505050565b6000602082840312156146d157600080fd5b81516110d281614313565b6000602082840312156146ee57600080fd5b81516110d281613ef6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561478957614789614728565b5060010190565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b8183526000602080850194508260005b858110156147f95781356147de81613ef6565b6001600160a01b0316875295820195908201906001016147cb565b509495945050505050565b60006001600160a01b03808a168352808916602084015260a0604084015261483060a08401888a614790565b83810360608501526148438187896147bb565b92505080841660808401525098975050505050505050565b805160208083015191908110156111a9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910360031b1b16919050565b60006001600160a01b038089168352808816602084015250608060408301526148ca608083018688614790565b82810360608401526148dd8185876147bb565b9998505050505050505050565b600181811c908216806148fe57607f821691505b602082108114156111a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6001600160a01b038416815282151560208201526060604082015260006149626060830184614267565b95945050505050565b6000821982111561497e5761497e614728565b500190565b60008282101561499557614995614728565b500390565b60007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808760601b168352808660601b1660148401525083602883015282516149ea81604885016020870161423b565b9190910160480195945050505050565b8281526040602082015260006131536040830184614267565b600060208284031215614a2557600080fd5b815167ffffffffffffffff811115614a3c57600080fd5b8201601f81018413614a4d57600080fd5b8051614a5b613ff982614043565b818152856020838501011115614a7057600080fd5b61496282602083016020860161423b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008251614ac281846020870161423b565b919091019291505056fea2646970667358221220bcdc840bcb5efbff7bd2e7f3d61a54164ff1f3ef9d75bb569195eb5307eb0a5664736f6c63430008090033",
  "libraries": {
    "SocialNetworkPostFactory": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "SocialNetworkProfileDataFactory": "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6"
  },
  "devdoc": {
    "author": "Dennis Tuszynski",
    "details": "Contract module represents a social network.",
    "errors": {
      "LSP4TokenNameNotEditable()": [
        {
          "details": "Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed.      The `LSP4TokenName` data key is located inside the ERC725Y key-value store of the digital asset contract.      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed."
        }
      ],
      "LSP4TokenSymbolNotEditable()": [
        {
          "details": "Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed.      The `LSP4TokenSymbol` data key is located inside the ERC725Y key-value store of the digital asset contract.      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "authorizeOperator(address,bytes32)": {
        "details": "Makes `operator` address an operator of `tokenId`. See {isOperatorFor}. Requirements - `tokenId` must exist. - caller must be current `tokenOwner` of `tokenId`. - `operator` cannot be the zero address. Emits an {AuthorizedOperator} event.",
        "params": {
          "operator": "The address to authorize as an operator.",
          "tokenId": "The tokenId operator has access to."
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens owned by `tokenOwner`.",
        "params": {
          "tokenOwner": "The address to query"
        },
        "returns": {
          "_0": "The number of tokens owned by this address"
        }
      },
      "commentPost(bytes,address[],address)": {
        "params": {
          "_data": "The comment post content data",
          "_taggedUsers": "An array of tagged users (optional)",
          "_targetPost": "The commented post"
        }
      },
      "createPost(bytes,address[])": {
        "params": {
          "_data": "The post content data",
          "_taggedUsers": "An array of tagged users (optional)"
        }
      },
      "getData(bytes32)": {
        "params": {
          "dataKey": "The key which value to retrieve"
        },
        "returns": {
          "dataValue": "The data stored at the key"
        }
      },
      "getData(bytes32[])": {
        "params": {
          "dataKeys": "The array of keys which values to retrieve"
        },
        "returns": {
          "dataValues": "The array of data stored at multiple keys"
        }
      },
      "getOperatorsOf(bytes32)": {
        "details": "Returns all `operator` addresses of `tokenId`. Requirements - `tokenId` must exist.",
        "params": {
          "tokenId": "The tokenId to query"
        },
        "returns": {
          "_0": "The list of operators for the `tokenId`"
        }
      },
      "isOperatorFor(address,bytes32)": {
        "details": "Returns whether `operator` address is an operator of `tokenId`. Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own operator. Requirements - `tokenId` must exist.",
        "params": {
          "operator": "The address to query",
          "tokenId": "The tokenId to query"
        },
        "returns": {
          "_0": "True if the owner of `tokenId` is `operator` address, false otherwise"
        }
      },
      "likePost(address)": {
        "params": {
          "_post": "The post to be liked"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "register()": {
        "details": "Creates a new instance of the SocialNetworkProfileData contract and links it to the sender address. Fails if the sender address is not a universal profile or if the sender address is already registered."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeOperator(address,bytes32)": {
        "details": "Removes `operator` address as an operator of `tokenId`. See {isOperatorFor}. Requirements - `tokenId` must exist. - caller must be current `tokenOwner` of `tokenId`. - `operator` cannot be the zero address. Emits a {RevokedOperator} event.",
        "params": {
          "operator": "The address to revoke as an operator.",
          "tokenId": "The tokenId `operator` is revoked from operating"
        }
      },
      "setData(bytes32,bytes)": {
        "params": {
          "dataKey": "The key to retrieve stored value",
          "dataValue": "The value to set SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event."
        }
      },
      "setData(bytes32[],bytes[])": {
        "details": "Sets array of data for multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.",
        "params": {
          "dataKeys": "The array of data keys for values to set",
          "dataValues": "The array of values to set"
        }
      },
      "sharePost(bytes,address[],address)": {
        "params": {
          "_data": "The comment post content data",
          "_taggedUsers": "An array of tagged users (optional)",
          "_targetPost": "The shared post"
        }
      },
      "subscribeUser(address)": {
        "params": {
          "_user": "The user to be subscribed"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tokenIdsOf(address)": {
        "details": "Returns the list of `tokenIds` for the `tokenOwner` address.",
        "params": {
          "tokenOwner": "The address to query owned tokens"
        },
        "returns": {
          "_0": "List of owned tokens by `tokenOwner` address"
        }
      },
      "tokenOwnerOf(bytes32)": {
        "details": "Returns the `tokenOwner` address of the `tokenId` token. Requirements: - `tokenId` must exist.",
        "params": {
          "tokenId": "The tokenId to query"
        },
        "returns": {
          "_0": "The address owning the `tokenId`"
        }
      },
      "totalSupply()": {
        "details": "Returns the number of existing tokens.",
        "returns": {
          "_0": "The number of existing tokens"
        }
      },
      "transfer(address,address,bytes32,bool,bytes)": {
        "details": "Transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be an operator of `tokenId`. Emits a {Transfer} event.",
        "params": {
          "data": "Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.",
          "force": "When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver",
          "from": "The sending address.",
          "to": "The receiving address.",
          "tokenId": "The tokenId to transfer."
        }
      },
      "transferBatch(address[],address[],bytes32[],bool,bytes[])": {
        "details": "Transfers many tokens based on the list `from`, `to`, `tokenId`. If any transfer fails the call will revert. Requirements: - `from`, `to`, `tokenId` lists are the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be an operator of each `tokenId`. Emits {Transfer} events.",
        "params": {
          "data": "Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.",
          "force": "When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver",
          "from": "The list of sending addresses.",
          "to": "The list of receiving addresses.",
          "tokenId": "The list of tokenId to transfer."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlikePost(address)": {
        "params": {
          "_post": "The post to be unliked"
        }
      },
      "unsubscribeUser(address)": {
        "params": {
          "_user": "The user to be unsubscribed"
        }
      }
    },
    "title": "Social Network Implementation",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DataChanged(bytes32)": {
        "notice": "Emitted when data at a key is changed"
      }
    },
    "kind": "user",
    "methods": {
      "commentPost(bytes,address[],address)": {
        "notice": "User (msg.sender) comments a post"
      },
      "createPost(bytes,address[])": {
        "notice": "User (msg.sender) creates a post"
      },
      "getData(bytes32)": {
        "notice": "Gets singular data at a given `dataKey`"
      },
      "getData(bytes32[])": {
        "notice": "Gets array of data for multiple given keys"
      },
      "likePost(address)": {
        "notice": "User (msg.sender) likes a post"
      },
      "register()": {
        "notice": "Registers a new user (msg.sender)"
      },
      "setData(bytes32,bytes)": {
        "notice": "Sets singular data for a given `dataKey`"
      },
      "sharePost(bytes,address[],address)": {
        "notice": "User (msg.sender) shares a post with a comment"
      },
      "subscribeUser(address)": {
        "notice": "User (msg.sender) subscribes an other user"
      },
      "unlikePost(address)": {
        "notice": "User (msg.sender) unlikes a post"
      },
      "unsubscribeUser(address)": {
        "notice": "User (msg.sender) unsubscribes an other user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 278,
        "contract": "contracts/SocialNetwork.sol:SocialNetwork",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 50,
        "contract": "contracts/SocialNetwork.sol:SocialNetwork",
        "label": "store",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 1689,
        "contract": "contracts/SocialNetwork.sol:SocialNetwork",
        "label": "_existingTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1693,
        "contract": "contracts/SocialNetwork.sol:SocialNetwork",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1698,
        "contract": "contracts/SocialNetwork.sol:SocialNetwork",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)3192_storage)"
      },
      {
        "astId": 1703,
        "contract": "contracts/SocialNetwork.sol:SocialNetwork",
        "label": "_operators",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3299_storage)"
      },
      {
        "astId": 4537,
        "contract": "contracts/SocialNetwork.sol:SocialNetwork",
        "label": "registeredUsers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4540,
        "contract": "contracts/SocialNetwork.sol:SocialNetwork",
        "label": "registeredUserCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)3192_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)3192_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3299_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3299_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3299_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3298,
            "contract": "contracts/SocialNetwork.sol:SocialNetwork",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2998_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)3192_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 3191,
            "contract": "contracts/SocialNetwork.sol:SocialNetwork",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2998_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2998_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2993,
            "contract": "contracts/SocialNetwork.sol:SocialNetwork",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2997,
            "contract": "contracts/SocialNetwork.sol:SocialNetwork",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}